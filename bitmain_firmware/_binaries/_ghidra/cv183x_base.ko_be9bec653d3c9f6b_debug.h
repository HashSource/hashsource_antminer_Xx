// Data types exported from: cv183x_base.ko_be9bec653d3c9f6b_debug
// Generated by Ghidra

#ifndef CV183X_BASE_KO_BE9BEC653D3C9F6B_DEBUG_TYPES_H
#define CV183X_BASE_KO_BE9BEC653D3C9F6B_DEBUG_TYPES_H

#include <stdint.h>
#include <stdbool.h>

/* ==================== Enumerations ==================== */

typedef enum {
    SHT_NULL = 0,
    SHT_PROGBITS = 1,
    SHT_SYMTAB = 2,
    SHT_STRTAB = 3,
    SHT_RELA = 4,
    SHT_HASH = 5,
    SHT_DYNAMIC = 6,
    SHT_NOTE = 7,
    SHT_NOBITS = 8,
    SHT_REL = 9,
    SHT_SHLIB = 10,
    SHT_DYNSYM = 11,
    SHT_INIT_ARRAY = 14,
    SHT_FINI_ARRAY = 15,
    SHT_PREINIT_ARRAY = 16,
    SHT_GROUP = 17,
    SHT_SYMTAB_SHNDX = 18,
    SHT_ANDROID_REL = 1610612737,
    SHT_ANDROID_RELA = 1610612738,
    SHT_GNU_ATTRIBUTES = 1879048181,
    SHT_GNU_HASH = 1879048182,
    SHT_GNU_LIBLIST = 1879048183,
    SHT_CHECKSUM = 1879048184,
    SHT_SUNW_move = 1879048186,
    SHT_SUNW_COMDAT = 1879048187,
    SHT_SUNW_syminfo = 1879048188,
    SHT_GNU_verdef = 1879048189,
    SHT_GNU_verneed = 1879048190,
    SHT_GNU_versym = 1879048191,
    SHT_AARCH64_ATTRIBUTES = 1879048195,
} Elf_SectionHeaderType_AARCH64;

/* ==================== Forward Declarations ==================== */

typedef struct Elf64_Ehdr Elf64_Ehdr;
typedef struct Elf64_Rela Elf64_Rela;
typedef struct Elf64_Shdr Elf64_Shdr;
typedef struct Elf64_Sym Elf64_Sym;
typedef struct GnuBuildId GnuBuildId;

/* ==================== Structures ==================== */

struct Elf64_Ehdr {
    byte e_ident_magic_num;  // offset: 0x0
    string e_ident_magic_str;  // offset: 0x1
    byte e_ident_class;  // offset: 0x4
    byte e_ident_data;  // offset: 0x5
    byte e_ident_version;  // offset: 0x6
    byte e_ident_osabi;  // offset: 0x7
    byte e_ident_abiversion;  // offset: 0x8
    byte e_ident_pad[7];  // offset: 0x9
    word e_type;  // offset: 0x10
    word e_machine;  // offset: 0x12
    dword e_version;  // offset: 0x14
    qword e_entry;  // offset: 0x18
    qword e_phoff;  // offset: 0x20
    qword e_shoff;  // offset: 0x28
    dword e_flags;  // offset: 0x30
    word e_ehsize;  // offset: 0x34
    word e_phentsize;  // offset: 0x36
    word e_phnum;  // offset: 0x38
    word e_shentsize;  // offset: 0x3a
    word e_shnum;  // offset: 0x3c
    word e_shstrndx;  // offset: 0x3e
}; // size: 0x40

struct Elf64_Rela {
    qword r_offset;  // offset: 0x0
    qword r_info;  // offset: 0x8
    qword r_addend;  // offset: 0x10
}; // size: 0x18

struct Elf64_Shdr {
    dword sh_name;  // offset: 0x0
    Elf_SectionHeaderType_AARCH64 sh_type;  // offset: 0x4
    qword sh_flags;  // offset: 0x8
    qword sh_addr;  // offset: 0x10
    qword sh_offset;  // offset: 0x18
    qword sh_size;  // offset: 0x20
    dword sh_link;  // offset: 0x28
    dword sh_info;  // offset: 0x2c
    qword sh_addralign;  // offset: 0x30
    qword sh_entsize;  // offset: 0x38
}; // size: 0x40

struct Elf64_Sym {
    dword st_name;  // offset: 0x0
    byte st_info;  // offset: 0x4
    byte st_other;  // offset: 0x5
    word st_shndx;  // offset: 0x6
    qword st_value;  // offset: 0x8
    qword st_size;  // offset: 0x10
}; // size: 0x18

struct GnuBuildId {
    dword namesz;  // offset: 0x0
    dword descsz;  // offset: 0x4
    dword type;  // offset: 0x8
    string name;  // offset: 0xc
    byte hash[20];  // offset: 0x10
}; // size: 0x24

/* ==================== Type Definitions ==================== */

typedef ulong size_t;

#endif // CV183X_BASE_KO_BE9BEC653D3C9F6B_DEBUG_TYPES_H
