// Data types exported from: ntpdate_55804ddd2166a72a
// Generated by Ghidra

#ifndef NTPDATE_55804DDD2166A72A_TYPES_H
#define NTPDATE_55804DDD2166A72A_TYPES_H

#include <stdint.h>
#include <stdbool.h>

/* ==================== Enumerations ==================== */

typedef enum {
    DT_NULL = 0,
    DT_NEEDED = 1,
    DT_PLTRELSZ = 2,
    DT_PLTGOT = 3,
    DT_HASH = 4,
    DT_STRTAB = 5,
    DT_SYMTAB = 6,
    DT_RELA = 7,
    DT_RELASZ = 8,
    DT_RELAENT = 9,
    DT_STRSZ = 10,
    DT_SYMENT = 11,
    DT_INIT = 12,
    DT_FINI = 13,
    DT_SONAME = 14,
    DT_RPATH = 15,
    DT_SYMBOLIC = 16,
    DT_REL = 17,
    DT_RELSZ = 18,
    DT_RELENT = 19,
    DT_PLTREL = 20,
    DT_DEBUG = 21,
    DT_TEXTREL = 22,
    DT_JMPREL = 23,
    DT_BIND_NOW = 24,
    DT_INIT_ARRAY = 25,
    DT_FINI_ARRAY = 26,
    DT_INIT_ARRAYSZ = 27,
    DT_FINI_ARRAYSZ = 28,
    DT_RUNPATH = 29,
    DT_FLAGS = 30,
    DT_PREINIT_ARRAY = 32,
    DT_PREINIT_ARRAYSZ = 33,
    DT_RELRSZ = 35,
    DT_RELR = 36,
    DT_RELRENT = 37,
    DT_ANDROID_REL = 1610612751,
    DT_ANDROID_RELSZ = 1610612752,
    DT_ANDROID_RELA = 1610612753,
    DT_ANDROID_RELASZ = 1610612754,
    DT_ANDROID_RELR = 1879040000,
    DT_ANDROID_RELRSZ = 1879040001,
    DT_ANDROID_RELRENT = 1879040003,
    DT_GNU_PRELINKED = 1879047669,
    DT_GNU_CONFLICTSZ = 1879047670,
    DT_GNU_LIBLISTSZ = 1879047671,
    DT_CHECKSUM = 1879047672,
    DT_PLTPADSZ = 1879047673,
    DT_MOVEENT = 1879047674,
    DT_MOVESZ = 1879047675,
    DT_FEATURE_1 = 1879047676,
    DT_POSFLAG_1 = 1879047677,
    DT_SYMINSZ = 1879047678,
    DT_SYMINENT = 1879047679,
    DT_GNU_XHASH = 1879047924,
    DT_GNU_HASH = 1879047925,
    DT_TLSDESC_PLT = 1879047926,
    DT_TLSDESC_GOT = 1879047927,
    DT_GNU_CONFLICT = 1879047928,
    DT_GNU_LIBLIST = 1879047929,
    DT_CONFIG = 1879047930,
    DT_DEPAUDIT = 1879047931,
    DT_AUDIT = 1879047932,
    DT_PLTPAD = 1879047933,
    DT_MOVETAB = 1879047934,
    DT_SYMINFO = 1879047935,
    DT_VERSYM = 1879048176,
    DT_RELACOUNT = 1879048185,
    DT_RELCOUNT = 1879048186,
    DT_FLAGS_1 = 1879048187,
    DT_VERDEF = 1879048188,
    DT_VERDEFNUM = 1879048189,
    DT_VERNEED = 1879048190,
    DT_VERNEEDNUM = 1879048191,
    DT_AUXILIARY = 2147483645,
    DT_FILTER = 2147483647,
} Elf32_DynTag_ARM;

typedef enum {
    PT_NULL = 0,
    PT_LOAD = 1,
    PT_DYNAMIC = 2,
    PT_INTERP = 3,
    PT_NOTE = 4,
    PT_SHLIB = 5,
    PT_PHDR = 6,
    PT_TLS = 7,
    PT_GNU_EH_FRAME = 1685382480,
    PT_GNU_STACK = 1685382481,
    PT_GNU_RELRO = 1685382482,
    PT_ARM_EXIDX = 1879048192,
} Elf_ProgramHeaderType_ARM;

typedef enum {
    SHT_NULL = 0,
    SHT_PROGBITS = 1,
    SHT_SYMTAB = 2,
    SHT_STRTAB = 3,
    SHT_RELA = 4,
    SHT_HASH = 5,
    SHT_DYNAMIC = 6,
    SHT_NOTE = 7,
    SHT_NOBITS = 8,
    SHT_REL = 9,
    SHT_SHLIB = 10,
    SHT_DYNSYM = 11,
    SHT_INIT_ARRAY = 14,
    SHT_FINI_ARRAY = 15,
    SHT_PREINIT_ARRAY = 16,
    SHT_GROUP = 17,
    SHT_SYMTAB_SHNDX = 18,
    SHT_ANDROID_REL = 1610612737,
    SHT_ANDROID_RELA = 1610612738,
    SHT_GNU_ATTRIBUTES = 1879048181,
    SHT_GNU_HASH = 1879048182,
    SHT_GNU_LIBLIST = 1879048183,
    SHT_CHECKSUM = 1879048184,
    SHT_SUNW_move = 1879048186,
    SHT_SUNW_COMDAT = 1879048187,
    SHT_SUNW_syminfo = 1879048188,
    SHT_GNU_verdef = 1879048189,
    SHT_GNU_verneed = 1879048190,
    SHT_GNU_versym = 1879048191,
    SHT_ARM_EXIDX = 1879048193,
    SHT_ARM_PREEMPTMAP = 1879048194,
    SHT_ARM_ATTRIBUTES = 1879048195,
    SHT_ARM_DEBUGOVERLAY = 1879048196,
    SHT_ARM_OVERLAYSECTION = 1879048197,
} Elf_SectionHeaderType_ARM;

typedef enum {
    ITIMER_REAL = 0,
    ITIMER_VIRTUAL = 1,
    ITIMER_PROF = 2,
} __itimer_which;

typedef enum {
    PRIO_PROCESS = 0,
    PRIO_PGRP = 1,
    PRIO_USER = 2,
} __priority_which;

/* ==================== Forward Declarations ==================== */

typedef struct Elf32_Dyn_ARM Elf32_Dyn_ARM;
typedef struct Elf32_Ehdr Elf32_Ehdr;
typedef struct Elf32_Phdr Elf32_Phdr;
typedef struct Elf32_Rel Elf32_Rel;
typedef struct Elf32_Shdr Elf32_Shdr;
typedef struct Elf32_Sym Elf32_Sym;
typedef struct GnuBuildId GnuBuildId;
typedef struct GnuDebugLink_8 GnuDebugLink_8;
typedef struct NoteAbiTag NoteAbiTag;
typedef struct _IO_FILE _IO_FILE;
typedef struct _IO_marker _IO_marker;
typedef struct __dirstream __dirstream;
typedef struct __sigset_t __sigset_t;
typedef struct _struct_1032 _struct_1032;
typedef struct _struct_1033 _struct_1033;
typedef struct _struct_1034 _struct_1034;
typedef struct _struct_1035 _struct_1035;
typedef struct _struct_1036 _struct_1036;
typedef struct _struct_1037 _struct_1037;
typedef struct addrinfo addrinfo;
typedef struct dirent dirent;
typedef struct itimerval itimerval;
typedef struct pollfd pollfd;
typedef struct sigaction sigaction;
typedef struct siginfo siginfo;
typedef struct sockaddr sockaddr;
typedef struct stat stat;
typedef struct timespec timespec;
typedef struct timeval timeval;
typedef struct timezone timezone;
typedef struct tm tm;

/* ==================== Structures ==================== */

struct Elf32_Dyn_ARM {
    Elf32_DynTag_ARM d_tag;  // offset: 0x0
    dword d_val;  // offset: 0x4
}; // size: 0x8

struct Elf32_Ehdr {
    byte e_ident_magic_num;  // offset: 0x0
    string e_ident_magic_str;  // offset: 0x1
    byte e_ident_class;  // offset: 0x4
    byte e_ident_data;  // offset: 0x5
    byte e_ident_version;  // offset: 0x6
    byte e_ident_osabi;  // offset: 0x7
    byte e_ident_abiversion;  // offset: 0x8
    byte e_ident_pad[7];  // offset: 0x9
    word e_type;  // offset: 0x10
    word e_machine;  // offset: 0x12
    dword e_version;  // offset: 0x14
    dword e_entry;  // offset: 0x18
    dword e_phoff;  // offset: 0x1c
    dword e_shoff;  // offset: 0x20
    dword e_flags;  // offset: 0x24
    word e_ehsize;  // offset: 0x28
    word e_phentsize;  // offset: 0x2a
    word e_phnum;  // offset: 0x2c
    word e_shentsize;  // offset: 0x2e
    word e_shnum;  // offset: 0x30
    word e_shstrndx;  // offset: 0x32
}; // size: 0x34

struct Elf32_Phdr {
    Elf_ProgramHeaderType_ARM p_type;  // offset: 0x0
    dword p_offset;  // offset: 0x4
    dword p_vaddr;  // offset: 0x8
    dword p_paddr;  // offset: 0xc
    dword p_filesz;  // offset: 0x10
    dword p_memsz;  // offset: 0x14
    dword p_flags;  // offset: 0x18
    dword p_align;  // offset: 0x1c
}; // size: 0x20

struct Elf32_Rel {
    dword r_offset;  // offset: 0x0
    dword r_info;  // offset: 0x4
}; // size: 0x8

struct Elf32_Shdr {
    dword sh_name;  // offset: 0x0
    Elf_SectionHeaderType_ARM sh_type;  // offset: 0x4
    dword sh_flags;  // offset: 0x8
    dword sh_addr;  // offset: 0xc
    dword sh_offset;  // offset: 0x10
    dword sh_size;  // offset: 0x14
    dword sh_link;  // offset: 0x18
    dword sh_info;  // offset: 0x1c
    dword sh_addralign;  // offset: 0x20
    dword sh_entsize;  // offset: 0x24
}; // size: 0x28

struct Elf32_Sym {
    dword st_name;  // offset: 0x0
    dword st_value;  // offset: 0x4
    dword st_size;  // offset: 0x8
    byte st_info;  // offset: 0xc
    byte st_other;  // offset: 0xd
    word st_shndx;  // offset: 0xe
}; // size: 0x10

struct GnuBuildId {
    dword namesz;  // offset: 0x0
    dword descsz;  // offset: 0x4
    dword type;  // offset: 0x8
    string name;  // offset: 0xc
    byte hash[20];  // offset: 0x10
}; // size: 0x24

struct GnuDebugLink_8 {
    string filename;  // offset: 0x0
    dword crc;  // offset: 0x8
}; // size: 0xc

struct NoteAbiTag {
    dword namesz;  // offset: 0x0
    dword descsz;  // offset: 0x4
    dword type;  // offset: 0x8
    string name;  // offset: 0xc
    dword abiType;  // offset: 0x10
    dword requiredKernelVersion[3];  // offset: 0x14
}; // size: 0x20

struct _IO_FILE {
    int _flags;  // offset: 0x0
    char * _IO_read_ptr;  // offset: 0x4
    char * _IO_read_end;  // offset: 0x8
    char * _IO_read_base;  // offset: 0xc
    char * _IO_write_base;  // offset: 0x10
    char * _IO_write_ptr;  // offset: 0x14
    char * _IO_write_end;  // offset: 0x18
    char * _IO_buf_base;  // offset: 0x1c
    char * _IO_buf_end;  // offset: 0x20
    char * _IO_save_base;  // offset: 0x24
    char * _IO_backup_base;  // offset: 0x28
    char * _IO_save_end;  // offset: 0x2c
    _IO_marker * _markers;  // offset: 0x30
    _IO_FILE * _chain;  // offset: 0x34
    int _fileno;  // offset: 0x38
    int _flags2;  // offset: 0x3c
    __off_t _old_offset;  // offset: 0x40
    ushort _cur_column;  // offset: 0x44
    char _vtable_offset;  // offset: 0x46
    char _shortbuf[1];  // offset: 0x47
    _IO_lock_t * _lock;  // offset: 0x48
    __off64_t _offset;  // offset: 0x50
    void * __pad1;  // offset: 0x58
    void * __pad2;  // offset: 0x5c
    void * __pad3;  // offset: 0x60
    void * __pad4;  // offset: 0x64
    size_t __pad5;  // offset: 0x68
    int _mode;  // offset: 0x6c
    char _unused2[40];  // offset: 0x70
}; // size: 0x98

struct _IO_marker {
    _IO_marker * _next;  // offset: 0x0
    _IO_FILE * _sbuf;  // offset: 0x4
    int _pos;  // offset: 0x8
}; // size: 0xc

struct __dirstream {
    // Empty structure
}; // size: 0x1

struct __sigset_t {
    ulong __val[32];  // offset: 0x0
}; // size: 0x80

struct _struct_1032 {
    __pid_t si_pid;  // offset: 0x0
    __uid_t si_uid;  // offset: 0x4
}; // size: 0x8

struct _struct_1033 {
    int si_tid;  // offset: 0x0
    int si_overrun;  // offset: 0x4
    sigval_t si_sigval;  // offset: 0x8
}; // size: 0xc

struct _struct_1034 {
    __pid_t si_pid;  // offset: 0x0
    __uid_t si_uid;  // offset: 0x4
    sigval_t si_sigval;  // offset: 0x8
}; // size: 0xc

struct _struct_1035 {
    __pid_t si_pid;  // offset: 0x0
    __uid_t si_uid;  // offset: 0x4
    int si_status;  // offset: 0x8
    __clock_t si_utime;  // offset: 0xc
    __clock_t si_stime;  // offset: 0x10
}; // size: 0x14

struct _struct_1036 {
    void * si_addr;  // offset: 0x0
}; // size: 0x4

struct _struct_1037 {
    long si_band;  // offset: 0x0
    int si_fd;  // offset: 0x4
}; // size: 0x8

struct addrinfo {
    int ai_flags;  // offset: 0x0
    int ai_family;  // offset: 0x4
    int ai_socktype;  // offset: 0x8
    int ai_protocol;  // offset: 0xc
    socklen_t ai_addrlen;  // offset: 0x10
    sockaddr * ai_addr;  // offset: 0x14
    char * ai_canonname;  // offset: 0x18
    addrinfo * ai_next;  // offset: 0x1c
}; // size: 0x20

struct dirent {
    __ino_t d_ino;  // offset: 0x0
    __off_t d_off;  // offset: 0x4
    ushort d_reclen;  // offset: 0x8
    uchar d_type;  // offset: 0xa
    char d_name[256];  // offset: 0xb
}; // size: 0x10c

struct itimerval {
    timeval it_interval;  // offset: 0x0
    timeval it_value;  // offset: 0x8
}; // size: 0x10

struct pollfd {
    int fd;  // offset: 0x0
    short events;  // offset: 0x4
    short revents;  // offset: 0x6
}; // size: 0x8

struct sigaction {
    _union_1051 __sigaction_handler;  // offset: 0x0
    __sigset_t sa_mask;  // offset: 0x4
    int sa_flags;  // offset: 0x84
    _func_4849 * sa_restorer;  // offset: 0x88
}; // size: 0x8c

struct siginfo {
    int si_signo;  // offset: 0x0
    int si_errno;  // offset: 0x4
    int si_code;  // offset: 0x8
    _union_1031 _sifields;  // offset: 0xc
}; // size: 0x80

struct sockaddr {
    sa_family_t sa_family;  // offset: 0x0
    char sa_data[14];  // offset: 0x2
}; // size: 0x10

struct stat {
    __dev_t st_dev;  // offset: 0x0
    ushort __pad1;  // offset: 0x8
    __ino_t st_ino;  // offset: 0xc
    __mode_t st_mode;  // offset: 0x10
    __nlink_t st_nlink;  // offset: 0x14
    __uid_t st_uid;  // offset: 0x18
    __gid_t st_gid;  // offset: 0x1c
    __dev_t st_rdev;  // offset: 0x20
    ushort __pad2;  // offset: 0x28
    __off_t st_size;  // offset: 0x2c
    __blksize_t st_blksize;  // offset: 0x30
    __blkcnt_t st_blocks;  // offset: 0x34
    timespec st_atim;  // offset: 0x38
    timespec st_mtim;  // offset: 0x40
    timespec st_ctim;  // offset: 0x48
    ulong __unused4;  // offset: 0x50
    ulong __unused5;  // offset: 0x54
}; // size: 0x58

struct timespec {
    __time_t tv_sec;  // offset: 0x0
    long tv_nsec;  // offset: 0x4
}; // size: 0x8

struct timeval {
    __time_t tv_sec;  // offset: 0x0
    __suseconds_t tv_usec;  // offset: 0x4
}; // size: 0x8

struct timezone {
    int tz_minuteswest;  // offset: 0x0
    int tz_dsttime;  // offset: 0x4
}; // size: 0x8

struct tm {
    int tm_sec;  // offset: 0x0
    int tm_min;  // offset: 0x4
    int tm_hour;  // offset: 0x8
    int tm_mday;  // offset: 0xc
    int tm_mon;  // offset: 0x10
    int tm_year;  // offset: 0x14
    int tm_wday;  // offset: 0x18
    int tm_yday;  // offset: 0x1c
    int tm_isdst;  // offset: 0x20
    long tm_gmtoff;  // offset: 0x24
    char * tm_zone;  // offset: 0x28
}; // size: 0x2c

/* ==================== Unions ==================== */

union _union_1031 {
    int[29] _pad;
    _struct_1032 _kill;
    _struct_1033 _timer;
    _struct_1034 _rt;
    _struct_1035 _sigchld;
    _struct_1036 _sigfault;
    _struct_1037 _sigpoll;
}; // size: 0x74

union _union_1051 {
    __sighandler_t sa_handler;
    _func_4848 * sa_sigaction;
}; // size: 0x4

union sigval {
    int sival_int;
    void * sival_ptr;
}; // size: 0x4

/* ==================== Type Definitions ==================== */

typedef __dirstream DIR;
typedef _IO_FILE FILE;
typedef void _IO_lock_t;
typedef long __blkcnt_t;
typedef long __blksize_t;
typedef long __clock_t;
typedef int __clockid_t;
typedef __u_quad_t __dev_t;
typedef uint __gid_t;
typedef void * __gnuc_va_list;
typedef uint __id_t;
typedef ulong __ino_t;
typedef int __int32_t;
typedef __itimer_which __itimer_which_t;
typedef uint __mode_t;
typedef uint __nlink_t;
typedef __quad_t __off64_t;
typedef long __off_t;
typedef int __pid_t;
typedef __priority_which __priority_which_t;
typedef longlong __quad_t;
typedef __sighandler_t * __sighandler_t;
typedef uint __socklen_t;
typedef int __ssize_t;
typedef long __suseconds_t;
typedef long __time_t;
typedef timezone * __timezone_ptr_t;
typedef ulonglong __u_quad_t;
typedef uint __uid_t;
typedef __clockid_t clockid_t;
typedef __id_t id_t;
typedef ulong nfds_t;
typedef ushort sa_family_t;
typedef siginfo siginfo_t;
typedef __sigset_t sigset_t;
typedef sigval sigval_t;
typedef ulong size_t;
typedef __socklen_t socklen_t;
typedef __ssize_t ssize_t;
typedef __time_t time_t;

/* ==================== Function Prototypes ==================== */

void __sighandler_t(int param0);
void _func_4848(int param0, siginfo_t * param1, void * param2);
void _func_4849(void);

#endif // NTPDATE_55804DDD2166A72A_TYPES_H
