// Data types exported from: FileParser_3157f9a0e4608491
// Generated by Ghidra

#ifndef FILEPARSER_3157F9A0E4608491_TYPES_H
#define FILEPARSER_3157F9A0E4608491_TYPES_H

#include <stdint.h>
#include <stdbool.h>

/* ==================== Enumerations ==================== */

typedef enum {
    DT_NULL = 0,
    DT_NEEDED = 1,
    DT_PLTRELSZ = 2,
    DT_PLTGOT = 3,
    DT_HASH = 4,
    DT_STRTAB = 5,
    DT_SYMTAB = 6,
    DT_RELA = 7,
    DT_RELASZ = 8,
    DT_RELAENT = 9,
    DT_STRSZ = 10,
    DT_SYMENT = 11,
    DT_INIT = 12,
    DT_FINI = 13,
    DT_SONAME = 14,
    DT_RPATH = 15,
    DT_SYMBOLIC = 16,
    DT_REL = 17,
    DT_RELSZ = 18,
    DT_RELENT = 19,
    DT_PLTREL = 20,
    DT_DEBUG = 21,
    DT_TEXTREL = 22,
    DT_JMPREL = 23,
    DT_BIND_NOW = 24,
    DT_INIT_ARRAY = 25,
    DT_FINI_ARRAY = 26,
    DT_INIT_ARRAYSZ = 27,
    DT_FINI_ARRAYSZ = 28,
    DT_RUNPATH = 29,
    DT_FLAGS = 30,
    DT_PREINIT_ARRAY = 32,
    DT_PREINIT_ARRAYSZ = 33,
    DT_RELRSZ = 35,
    DT_RELR = 36,
    DT_RELRENT = 37,
    DT_ANDROID_REL = 1610612751,
    DT_ANDROID_RELSZ = 1610612752,
    DT_ANDROID_RELA = 1610612753,
    DT_ANDROID_RELASZ = 1610612754,
    DT_ANDROID_RELR = 1879040000,
    DT_ANDROID_RELRSZ = 1879040001,
    DT_ANDROID_RELRENT = 1879040003,
    DT_GNU_PRELINKED = 1879047669,
    DT_GNU_CONFLICTSZ = 1879047670,
    DT_GNU_LIBLISTSZ = 1879047671,
    DT_CHECKSUM = 1879047672,
    DT_PLTPADSZ = 1879047673,
    DT_MOVEENT = 1879047674,
    DT_MOVESZ = 1879047675,
    DT_FEATURE_1 = 1879047676,
    DT_POSFLAG_1 = 1879047677,
    DT_SYMINSZ = 1879047678,
    DT_SYMINENT = 1879047679,
    DT_GNU_XHASH = 1879047924,
    DT_GNU_HASH = 1879047925,
    DT_TLSDESC_PLT = 1879047926,
    DT_TLSDESC_GOT = 1879047927,
    DT_GNU_CONFLICT = 1879047928,
    DT_GNU_LIBLIST = 1879047929,
    DT_CONFIG = 1879047930,
    DT_DEPAUDIT = 1879047931,
    DT_AUDIT = 1879047932,
    DT_PLTPAD = 1879047933,
    DT_MOVETAB = 1879047934,
    DT_SYMINFO = 1879047935,
    DT_VERSYM = 1879048176,
    DT_RELACOUNT = 1879048185,
    DT_RELCOUNT = 1879048186,
    DT_FLAGS_1 = 1879048187,
    DT_VERDEF = 1879048188,
    DT_VERDEFNUM = 1879048189,
    DT_VERNEED = 1879048190,
    DT_VERNEEDNUM = 1879048191,
    DT_AUXILIARY = 2147483645,
    DT_FILTER = 2147483647,
} Elf32_DynTag_ARM;

typedef enum {
    PT_NULL = 0,
    PT_LOAD = 1,
    PT_DYNAMIC = 2,
    PT_INTERP = 3,
    PT_NOTE = 4,
    PT_SHLIB = 5,
    PT_PHDR = 6,
    PT_TLS = 7,
    PT_GNU_EH_FRAME = 1685382480,
    PT_GNU_STACK = 1685382481,
    PT_GNU_RELRO = 1685382482,
    PT_ARM_EXIDX = 1879048192,
} Elf_ProgramHeaderType_ARM;

typedef enum {
    SHT_NULL = 0,
    SHT_PROGBITS = 1,
    SHT_SYMTAB = 2,
    SHT_STRTAB = 3,
    SHT_RELA = 4,
    SHT_HASH = 5,
    SHT_DYNAMIC = 6,
    SHT_NOTE = 7,
    SHT_NOBITS = 8,
    SHT_REL = 9,
    SHT_SHLIB = 10,
    SHT_DYNSYM = 11,
    SHT_INIT_ARRAY = 14,
    SHT_FINI_ARRAY = 15,
    SHT_PREINIT_ARRAY = 16,
    SHT_GROUP = 17,
    SHT_SYMTAB_SHNDX = 18,
    SHT_ANDROID_REL = 1610612737,
    SHT_ANDROID_RELA = 1610612738,
    SHT_GNU_ATTRIBUTES = 1879048181,
    SHT_GNU_HASH = 1879048182,
    SHT_GNU_LIBLIST = 1879048183,
    SHT_CHECKSUM = 1879048184,
    SHT_SUNW_move = 1879048186,
    SHT_SUNW_COMDAT = 1879048187,
    SHT_SUNW_syminfo = 1879048188,
    SHT_GNU_verdef = 1879048189,
    SHT_GNU_verneed = 1879048190,
    SHT_GNU_versym = 1879048191,
    SHT_ARM_EXIDX = 1879048193,
    SHT_ARM_PREEMPTMAP = 1879048194,
    SHT_ARM_ATTRIBUTES = 1879048195,
    SHT_ARM_DEBUGOVERLAY = 1879048196,
    SHT_ARM_OVERLAYSECTION = 1879048197,
} Elf_SectionHeaderType_ARM;

/* ==================== Forward Declarations ==================== */

typedef struct Elf32_Dyn_ARM Elf32_Dyn_ARM;
typedef struct Elf32_Ehdr Elf32_Ehdr;
typedef struct Elf32_Phdr Elf32_Phdr;
typedef struct Elf32_Rel Elf32_Rel;
typedef struct Elf32_Shdr Elf32_Shdr;
typedef struct Elf32_Sym Elf32_Sym;
typedef struct GnuBuildId GnuBuildId;
typedef struct NoteAbiTag NoteAbiTag;
typedef struct SHA256state_st SHA256state_st;
typedef struct _IO_FILE _IO_FILE;
typedef struct _IO_marker _IO_marker;
typedef struct bignum_ctx bignum_ctx;
typedef struct bignum_st bignum_st;
typedef struct bio_method_st bio_method_st;
typedef struct bio_st bio_st;
typedef struct bn_blinding_st bn_blinding_st;
typedef struct bn_gencb_st bn_gencb_st;
typedef struct bn_mont_ctx_st bn_mont_ctx_st;
typedef struct crypto_ex_data_st crypto_ex_data_st;
typedef struct engine_st engine_st;
typedef struct rsa_meth_st rsa_meth_st;
typedef struct rsa_st rsa_st;
typedef struct stack_st stack_st;
typedef struct stack_st_void stack_st_void;
typedef struct stat64 stat64;
typedef struct timespec timespec;

/* ==================== Structures ==================== */

struct Elf32_Dyn_ARM {
    Elf32_DynTag_ARM d_tag;  // offset: 0x0
    dword d_val;  // offset: 0x4
}; // size: 0x8

struct Elf32_Ehdr {
    byte e_ident_magic_num;  // offset: 0x0
    string e_ident_magic_str;  // offset: 0x1
    byte e_ident_class;  // offset: 0x4
    byte e_ident_data;  // offset: 0x5
    byte e_ident_version;  // offset: 0x6
    byte e_ident_osabi;  // offset: 0x7
    byte e_ident_abiversion;  // offset: 0x8
    byte e_ident_pad[7];  // offset: 0x9
    word e_type;  // offset: 0x10
    word e_machine;  // offset: 0x12
    dword e_version;  // offset: 0x14
    dword e_entry;  // offset: 0x18
    dword e_phoff;  // offset: 0x1c
    dword e_shoff;  // offset: 0x20
    dword e_flags;  // offset: 0x24
    word e_ehsize;  // offset: 0x28
    word e_phentsize;  // offset: 0x2a
    word e_phnum;  // offset: 0x2c
    word e_shentsize;  // offset: 0x2e
    word e_shnum;  // offset: 0x30
    word e_shstrndx;  // offset: 0x32
}; // size: 0x34

struct Elf32_Phdr {
    Elf_ProgramHeaderType_ARM p_type;  // offset: 0x0
    dword p_offset;  // offset: 0x4
    dword p_vaddr;  // offset: 0x8
    dword p_paddr;  // offset: 0xc
    dword p_filesz;  // offset: 0x10
    dword p_memsz;  // offset: 0x14
    dword p_flags;  // offset: 0x18
    dword p_align;  // offset: 0x1c
}; // size: 0x20

struct Elf32_Rel {
    dword r_offset;  // offset: 0x0
    dword r_info;  // offset: 0x4
}; // size: 0x8

struct Elf32_Shdr {
    dword sh_name;  // offset: 0x0
    Elf_SectionHeaderType_ARM sh_type;  // offset: 0x4
    dword sh_flags;  // offset: 0x8
    dword sh_addr;  // offset: 0xc
    dword sh_offset;  // offset: 0x10
    dword sh_size;  // offset: 0x14
    dword sh_link;  // offset: 0x18
    dword sh_info;  // offset: 0x1c
    dword sh_addralign;  // offset: 0x20
    dword sh_entsize;  // offset: 0x24
}; // size: 0x28

struct Elf32_Sym {
    dword st_name;  // offset: 0x0
    dword st_value;  // offset: 0x4
    dword st_size;  // offset: 0x8
    byte st_info;  // offset: 0xc
    byte st_other;  // offset: 0xd
    word st_shndx;  // offset: 0xe
}; // size: 0x10

struct GnuBuildId {
    dword namesz;  // offset: 0x0
    dword descsz;  // offset: 0x4
    dword type;  // offset: 0x8
    string name;  // offset: 0xc
    byte hash[20];  // offset: 0x10
}; // size: 0x24

struct NoteAbiTag {
    dword namesz;  // offset: 0x0
    dword descsz;  // offset: 0x4
    dword type;  // offset: 0x8
    string name;  // offset: 0xc
    dword abiType;  // offset: 0x10
    dword requiredKernelVersion[3];  // offset: 0x14
}; // size: 0x20

struct SHA256state_st {
    uint h[8];  // offset: 0x0
    uint Nl;  // offset: 0x20
    uint Nh;  // offset: 0x24
    uint data[16];  // offset: 0x28
    uint num;  // offset: 0x68
    uint md_len;  // offset: 0x6c
}; // size: 0x70

struct _IO_FILE {
    int _flags;  // offset: 0x0
    char * _IO_read_ptr;  // offset: 0x4
    char * _IO_read_end;  // offset: 0x8
    char * _IO_read_base;  // offset: 0xc
    char * _IO_write_base;  // offset: 0x10
    char * _IO_write_ptr;  // offset: 0x14
    char * _IO_write_end;  // offset: 0x18
    char * _IO_buf_base;  // offset: 0x1c
    char * _IO_buf_end;  // offset: 0x20
    char * _IO_save_base;  // offset: 0x24
    char * _IO_backup_base;  // offset: 0x28
    char * _IO_save_end;  // offset: 0x2c
    _IO_marker * _markers;  // offset: 0x30
    _IO_FILE * _chain;  // offset: 0x34
    int _fileno;  // offset: 0x38
    int _flags2;  // offset: 0x3c
    __off_t _old_offset;  // offset: 0x40
    ushort _cur_column;  // offset: 0x44
    char _vtable_offset;  // offset: 0x46
    char _shortbuf[1];  // offset: 0x47
    _IO_lock_t * _lock;  // offset: 0x48
    __off64_t _offset;  // offset: 0x50
    void * __pad1;  // offset: 0x58
    void * __pad2;  // offset: 0x5c
    void * __pad3;  // offset: 0x60
    void * __pad4;  // offset: 0x64
    size_t __pad5;  // offset: 0x68
    int _mode;  // offset: 0x6c
    char _unused2[40];  // offset: 0x70
}; // size: 0x98

struct _IO_marker {
    _IO_marker * _next;  // offset: 0x0
    _IO_FILE * _sbuf;  // offset: 0x4
    int _pos;  // offset: 0x8
}; // size: 0xc

struct bignum_ctx {
    // Empty structure
}; // size: 0x1

struct bignum_st {
    ulong * d;  // offset: 0x0
    int top;  // offset: 0x4
    int dmax;  // offset: 0x8
    int neg;  // offset: 0xc
    int flags;  // offset: 0x10
}; // size: 0x14

struct bio_method_st {
    int type;  // offset: 0x0
    char * name;  // offset: 0x4
    _func_737 * bwrite;  // offset: 0x8
    _func_738 * bread;  // offset: 0xc
    _func_739 * bputs;  // offset: 0x10
    _func_740 * bgets;  // offset: 0x14
    _func_741 * ctrl;  // offset: 0x18
    _func_742 * create;  // offset: 0x1c
    _func_743 * destroy;  // offset: 0x20
    _func_744 * callback_ctrl;  // offset: 0x24
}; // size: 0x28

struct bio_st {
    BIO_METHOD * method;  // offset: 0x0
    _func_745 * callback;  // offset: 0x4
    char * cb_arg;  // offset: 0x8
    int init;  // offset: 0xc
    int shutdown;  // offset: 0x10
    int flags;  // offset: 0x14
    int retry_reason;  // offset: 0x18
    int num;  // offset: 0x1c
    void * ptr;  // offset: 0x20
    bio_st * next_bio;  // offset: 0x24
    bio_st * prev_bio;  // offset: 0x28
    int references;  // offset: 0x2c
    ulong num_read;  // offset: 0x30
    ulong num_write;  // offset: 0x34
    CRYPTO_EX_DATA ex_data;  // offset: 0x38
}; // size: 0x40

struct bn_blinding_st {
    // Empty structure
}; // size: 0x1

struct bn_gencb_st {
    uint ver;  // offset: 0x0
    void * arg;  // offset: 0x4
    _union_181 cb;  // offset: 0x8
}; // size: 0xc

struct bn_mont_ctx_st {
    int ri;  // offset: 0x0
    BIGNUM RR;  // offset: 0x4
    BIGNUM N;  // offset: 0x18
    BIGNUM Ni;  // offset: 0x2c
    ulong n0[2];  // offset: 0x40
    int flags;  // offset: 0x48
}; // size: 0x4c

struct crypto_ex_data_st {
    stack_st_void * sk;  // offset: 0x0
    int dummy;  // offset: 0x4
}; // size: 0x8

struct engine_st {
    // Empty structure
}; // size: 0x1

struct rsa_meth_st {
    char * name;  // offset: 0x0
    _func_1760 * rsa_pub_enc;  // offset: 0x4
    _func_1761 * rsa_pub_dec;  // offset: 0x8
    _func_1762 * rsa_priv_enc;  // offset: 0xc
    _func_1763 * rsa_priv_dec;  // offset: 0x10
    _func_1764 * rsa_mod_exp;  // offset: 0x14
    _func_1765 * bn_mod_exp;  // offset: 0x18
    _func_1766 * init;  // offset: 0x1c
    _func_1767 * finish;  // offset: 0x20
    int flags;  // offset: 0x24
    char * app_data;  // offset: 0x28
    _func_1768 * rsa_sign;  // offset: 0x2c
    _func_1769 * rsa_verify;  // offset: 0x30
    _func_1770 * rsa_keygen;  // offset: 0x34
}; // size: 0x38

struct rsa_st {
    int pad;  // offset: 0x0
    long version;  // offset: 0x4
    RSA_METHOD * meth;  // offset: 0x8
    ENGINE * engine;  // offset: 0xc
    BIGNUM * n;  // offset: 0x10
    BIGNUM * e;  // offset: 0x14
    BIGNUM * d;  // offset: 0x18
    BIGNUM * p;  // offset: 0x1c
    BIGNUM * q;  // offset: 0x20
    BIGNUM * dmp1;  // offset: 0x24
    BIGNUM * dmq1;  // offset: 0x28
    BIGNUM * iqmp;  // offset: 0x2c
    CRYPTO_EX_DATA ex_data;  // offset: 0x30
    int references;  // offset: 0x38
    int flags;  // offset: 0x3c
    BN_MONT_CTX * _method_mod_n;  // offset: 0x40
    BN_MONT_CTX * _method_mod_p;  // offset: 0x44
    BN_MONT_CTX * _method_mod_q;  // offset: 0x48
    char * bignum_data;  // offset: 0x4c
    BN_BLINDING * blinding;  // offset: 0x50
    BN_BLINDING * mt_blinding;  // offset: 0x54
}; // size: 0x58

struct stack_st {
    int num;  // offset: 0x0
    char * * data;  // offset: 0x4
    int sorted;  // offset: 0x8
    int num_alloc;  // offset: 0xc
    _func_290 * comp;  // offset: 0x10
}; // size: 0x14

struct stack_st_void {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stat64 {
    __dev_t st_dev;  // offset: 0x0
    uint __pad1;  // offset: 0x8
    __ino_t __st_ino;  // offset: 0xc
    __mode_t st_mode;  // offset: 0x10
    __nlink_t st_nlink;  // offset: 0x14
    __uid_t st_uid;  // offset: 0x18
    __gid_t st_gid;  // offset: 0x1c
    __dev_t st_rdev;  // offset: 0x20
    uint __pad2;  // offset: 0x28
    __off64_t st_size;  // offset: 0x30
    __blksize_t st_blksize;  // offset: 0x38
    __blkcnt64_t st_blocks;  // offset: 0x40
    timespec st_atim;  // offset: 0x48
    timespec st_mtim;  // offset: 0x50
    timespec st_ctim;  // offset: 0x58
    __ino64_t st_ino;  // offset: 0x60
}; // size: 0x68

struct timespec {
    __time_t tv_sec;  // offset: 0x0
    long tv_nsec;  // offset: 0x4
}; // size: 0x8

/* ==================== Unions ==================== */

union _union_181 {
    _func_556 * cb_1;
    _func_557 * cb_2;
}; // size: 0x4

/* ==================== Type Definitions ==================== */

typedef bignum_st BIGNUM;
typedef bio_st BIO;
typedef bio_method_st BIO_METHOD;
typedef bn_blinding_st BN_BLINDING;
typedef bignum_ctx BN_CTX;
typedef bn_gencb_st BN_GENCB;
typedef bn_mont_ctx_st BN_MONT_CTX;
typedef crypto_ex_data_st CRYPTO_EX_DATA;
typedef engine_st ENGINE;
typedef _IO_FILE FILE;
typedef rsa_st RSA;
typedef rsa_meth_st RSA_METHOD;
typedef SHA256state_st SHA256_CTX;
typedef void _IO_lock_t;
typedef stack_st _STACK;
typedef __quad_t __blkcnt64_t;
typedef long __blksize_t;
typedef __u_quad_t __dev_t;
typedef uint __gid_t;
typedef __u_quad_t __ino64_t;
typedef ulong __ino_t;
typedef uint __mode_t;
typedef uint __nlink_t;
typedef __quad_t __off64_t;
typedef long __off_t;
typedef longlong __quad_t;
typedef long __time_t;
typedef ulonglong __u_quad_t;
typedef uint __uid_t;
typedef bio_info_cb bio_info_cb;
typedef pem_password_cb pem_password_cb;
typedef ulong size_t;

/* ==================== Function Prototypes ==================== */

int _func_1760(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1761(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1762(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1763(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1764(BIGNUM * r0, BIGNUM * I, RSA * rsa, BN_CTX * ctx);
int _func_1765(BIGNUM * r, BIGNUM * a, BIGNUM * p, BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int _func_1766(RSA * rsa);
int _func_1767(RSA * rsa);
int _func_1768(int type, uchar * m, uint m_length, uchar * sigret, uint * siglen, RSA * rsa);
int _func_1769(int dtype, uchar * m, uint m_length, uchar * sigbuf, uint siglen, RSA * rsa);
int _func_1770(RSA * rsa, int bits, BIGNUM * e, BN_GENCB * cb);
int _func_290(void * param0, void * param1);
void _func_556(int param0, int param1, void * param2);
int _func_557(int param0, int param1, BN_GENCB * param2);
int _func_737(BIO * param0, char * param1, int param2);
int _func_738(BIO * param0, char * param1, int param2);
int _func_739(BIO * param0, char * param1);
int _func_740(BIO * param0, char * param1, int param2);
long _func_741(BIO * param0, int param1, long param2, void * param3);
int _func_742(BIO * param0);
int _func_743(BIO * param0);
long _func_744(BIO * param0, int param1, bio_info_cb * param2);
long _func_745(bio_st * param0, int param1, char * param2, int param3, long param4, long param5);
void bio_info_cb(bio_st * param0, int param1, char * param2, int param3, long param4, long param5);
int pem_password_cb(char * buf, int size, int rwflag, void * userdata);

#endif // FILEPARSER_3157F9A0E4608491_TYPES_H
