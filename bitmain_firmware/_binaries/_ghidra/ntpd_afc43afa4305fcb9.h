// Data types exported from: ntpd_afc43afa4305fcb9
// Generated by Ghidra

#ifndef NTPD_AFC43AFA4305FCB9_TYPES_H
#define NTPD_AFC43AFA4305FCB9_TYPES_H

#include <stdint.h>
#include <stdbool.h>

/* ==================== Enumerations ==================== */

typedef enum {
    DT_NULL = 0,
    DT_NEEDED = 1,
    DT_PLTRELSZ = 2,
    DT_PLTGOT = 3,
    DT_HASH = 4,
    DT_STRTAB = 5,
    DT_SYMTAB = 6,
    DT_RELA = 7,
    DT_RELASZ = 8,
    DT_RELAENT = 9,
    DT_STRSZ = 10,
    DT_SYMENT = 11,
    DT_INIT = 12,
    DT_FINI = 13,
    DT_SONAME = 14,
    DT_RPATH = 15,
    DT_SYMBOLIC = 16,
    DT_REL = 17,
    DT_RELSZ = 18,
    DT_RELENT = 19,
    DT_PLTREL = 20,
    DT_DEBUG = 21,
    DT_TEXTREL = 22,
    DT_JMPREL = 23,
    DT_BIND_NOW = 24,
    DT_INIT_ARRAY = 25,
    DT_FINI_ARRAY = 26,
    DT_INIT_ARRAYSZ = 27,
    DT_FINI_ARRAYSZ = 28,
    DT_RUNPATH = 29,
    DT_FLAGS = 30,
    DT_PREINIT_ARRAY = 32,
    DT_PREINIT_ARRAYSZ = 33,
    DT_RELRSZ = 35,
    DT_RELR = 36,
    DT_RELRENT = 37,
    DT_ANDROID_REL = 1610612751,
    DT_ANDROID_RELSZ = 1610612752,
    DT_ANDROID_RELA = 1610612753,
    DT_ANDROID_RELASZ = 1610612754,
    DT_ANDROID_RELR = 1879040000,
    DT_ANDROID_RELRSZ = 1879040001,
    DT_ANDROID_RELRENT = 1879040003,
    DT_GNU_PRELINKED = 1879047669,
    DT_GNU_CONFLICTSZ = 1879047670,
    DT_GNU_LIBLISTSZ = 1879047671,
    DT_CHECKSUM = 1879047672,
    DT_PLTPADSZ = 1879047673,
    DT_MOVEENT = 1879047674,
    DT_MOVESZ = 1879047675,
    DT_FEATURE_1 = 1879047676,
    DT_POSFLAG_1 = 1879047677,
    DT_SYMINSZ = 1879047678,
    DT_SYMINENT = 1879047679,
    DT_GNU_XHASH = 1879047924,
    DT_GNU_HASH = 1879047925,
    DT_TLSDESC_PLT = 1879047926,
    DT_TLSDESC_GOT = 1879047927,
    DT_GNU_CONFLICT = 1879047928,
    DT_GNU_LIBLIST = 1879047929,
    DT_CONFIG = 1879047930,
    DT_DEPAUDIT = 1879047931,
    DT_AUDIT = 1879047932,
    DT_PLTPAD = 1879047933,
    DT_MOVETAB = 1879047934,
    DT_SYMINFO = 1879047935,
    DT_VERSYM = 1879048176,
    DT_RELACOUNT = 1879048185,
    DT_RELCOUNT = 1879048186,
    DT_FLAGS_1 = 1879048187,
    DT_VERDEF = 1879048188,
    DT_VERDEFNUM = 1879048189,
    DT_VERNEED = 1879048190,
    DT_VERNEEDNUM = 1879048191,
    DT_AUXILIARY = 2147483645,
    DT_FILTER = 2147483647,
} Elf32_DynTag_ARM;

typedef enum {
    PT_NULL = 0,
    PT_LOAD = 1,
    PT_DYNAMIC = 2,
    PT_INTERP = 3,
    PT_NOTE = 4,
    PT_SHLIB = 5,
    PT_PHDR = 6,
    PT_TLS = 7,
    PT_GNU_EH_FRAME = 1685382480,
    PT_GNU_STACK = 1685382481,
    PT_GNU_RELRO = 1685382482,
    PT_ARM_EXIDX = 1879048192,
} Elf_ProgramHeaderType_ARM;

typedef enum {
    SHT_NULL = 0,
    SHT_PROGBITS = 1,
    SHT_SYMTAB = 2,
    SHT_STRTAB = 3,
    SHT_RELA = 4,
    SHT_HASH = 5,
    SHT_DYNAMIC = 6,
    SHT_NOTE = 7,
    SHT_NOBITS = 8,
    SHT_REL = 9,
    SHT_SHLIB = 10,
    SHT_DYNSYM = 11,
    SHT_INIT_ARRAY = 14,
    SHT_FINI_ARRAY = 15,
    SHT_PREINIT_ARRAY = 16,
    SHT_GROUP = 17,
    SHT_SYMTAB_SHNDX = 18,
    SHT_ANDROID_REL = 1610612737,
    SHT_ANDROID_RELA = 1610612738,
    SHT_GNU_ATTRIBUTES = 1879048181,
    SHT_GNU_HASH = 1879048182,
    SHT_GNU_LIBLIST = 1879048183,
    SHT_CHECKSUM = 1879048184,
    SHT_SUNW_move = 1879048186,
    SHT_SUNW_COMDAT = 1879048187,
    SHT_SUNW_syminfo = 1879048188,
    SHT_GNU_verdef = 1879048189,
    SHT_GNU_verneed = 1879048190,
    SHT_GNU_versym = 1879048191,
    SHT_ARM_EXIDX = 1879048193,
    SHT_ARM_PREEMPTMAP = 1879048194,
    SHT_ARM_ATTRIBUTES = 1879048195,
    SHT_ARM_DEBUGOVERLAY = 1879048196,
    SHT_ARM_OVERLAYSECTION = 1879048197,
} Elf_SectionHeaderType_ARM;

typedef enum {
    ITIMER_REAL = 0,
    ITIMER_VIRTUAL = 1,
    ITIMER_PROF = 2,
} __itimer_which;

typedef enum {
    PRIO_PROCESS = 0,
    PRIO_PGRP = 1,
    PRIO_USER = 2,
} __priority_which;

typedef enum {
    RLIMIT_CPU = 0,
    RLIMIT_FSIZE = 1,
    RLIMIT_DATA = 2,
    RLIMIT_STACK = 3,
    RLIMIT_CORE = 4,
    __RLIMIT_RSS = 5,
    __RLIMIT_NPROC = 6,
    RLIMIT_NOFILE = 7,
    __RLIMIT_MEMLOCK = 8,
    __RLIMIT_OFILE = 8,
    RLIMIT_AS = 9,
    __RLIMIT_LOCKS = 10,
    __RLIMIT_SIGPENDING = 11,
    __RLIMIT_MSGQUEUE = 12,
    __RLIMIT_NICE = 13,
    __RLIMIT_RTPRIO = 14,
    __RLIMIT_NLIMITS = 15,
    __RLIM_NLIMITS = 16,
} __rlimit_resource;

/* ==================== Forward Declarations ==================== */

typedef struct ASIdentifierChoice_st ASIdentifierChoice_st;
typedef struct ASIdentifiers_st ASIdentifiers_st;
typedef struct ASN1_ENCODING_st ASN1_ENCODING_st;
typedef struct ASN1_VALUE_st ASN1_VALUE_st;
typedef struct AUTHORITY_KEYID_st AUTHORITY_KEYID_st;
typedef struct CMAC_CTX_st CMAC_CTX_st;
typedef struct DSA_SIG_st DSA_SIG_st;
typedef struct Elf32_Dyn_ARM Elf32_Dyn_ARM;
typedef struct Elf32_Ehdr Elf32_Ehdr;
typedef struct Elf32_Phdr Elf32_Phdr;
typedef struct Elf32_Rel Elf32_Rel;
typedef struct Elf32_Shdr Elf32_Shdr;
typedef struct Elf32_Sym Elf32_Sym;
typedef struct GnuBuildId GnuBuildId;
typedef struct NAME_CONSTRAINTS_st NAME_CONSTRAINTS_st;
typedef struct NoteAbiTag NoteAbiTag;
typedef struct X509_POLICY_CACHE_st X509_POLICY_CACHE_st;
typedef struct X509_algor_st X509_algor_st;
typedef struct X509_extension_st X509_extension_st;
typedef struct X509_name_st X509_name_st;
typedef struct X509_pubkey_st X509_pubkey_st;
typedef struct X509_val_st X509_val_st;
typedef struct _IO_FILE _IO_FILE;
typedef struct _IO_marker _IO_marker;
typedef struct __dirstream __dirstream;
typedef struct __pthread_internal_slist __pthread_internal_slist;
typedef struct __pthread_mutex_s __pthread_mutex_s;
typedef struct __sigset_t __sigset_t;
typedef struct _struct_1032 _struct_1032;
typedef struct _struct_1033 _struct_1033;
typedef struct _struct_1034 _struct_1034;
typedef struct _struct_1035 _struct_1035;
typedef struct _struct_1036 _struct_1036;
typedef struct _struct_1037 _struct_1037;
typedef struct addrinfo addrinfo;
typedef struct asn1_object_st asn1_object_st;
typedef struct asn1_string_st asn1_string_st;
typedef struct asn1_type_st asn1_type_st;
typedef struct bignum_ctx bignum_ctx;
typedef struct bignum_st bignum_st;
typedef struct bio_method_st bio_method_st;
typedef struct bio_st bio_st;
typedef struct bn_blinding_st bn_blinding_st;
typedef struct bn_gencb_st bn_gencb_st;
typedef struct bn_mont_ctx_st bn_mont_ctx_st;
typedef struct buf_mem_st buf_mem_st;
typedef struct crypto_ex_data_st crypto_ex_data_st;
typedef struct dh_method dh_method;
typedef struct dh_st dh_st;
typedef struct dirent64 dirent64;
typedef struct dsa_method dsa_method;
typedef struct dsa_st dsa_st;
typedef struct ec_key_st ec_key_st;
typedef struct engine_st engine_st;
typedef struct env_md_ctx_st env_md_ctx_st;
typedef struct env_md_st env_md_st;
typedef struct evp_cipher_ctx_st evp_cipher_ctx_st;
typedef struct evp_cipher_st evp_cipher_st;
typedef struct evp_pkey_asn1_method_st evp_pkey_asn1_method_st;
typedef struct evp_pkey_ctx_st evp_pkey_ctx_st;
typedef struct evp_pkey_st evp_pkey_st;
typedef struct fd_set fd_set;
typedef struct iovec iovec;
typedef struct itimerval itimerval;
typedef struct msghdr msghdr;
typedef struct pollfd pollfd;
typedef struct rlimit64 rlimit64;
typedef struct rsa_meth_st rsa_meth_st;
typedef struct rsa_st rsa_st;
typedef struct sched_param sched_param;
typedef struct sigaction sigaction;
typedef struct siginfo siginfo;
typedef struct sockaddr sockaddr;
typedef struct stack_st stack_st;
typedef struct stack_st_ASIdOrRange stack_st_ASIdOrRange;
typedef struct stack_st_ASN1_OBJECT stack_st_ASN1_OBJECT;
typedef struct stack_st_DIST_POINT stack_st_DIST_POINT;
typedef struct stack_st_GENERAL_NAME stack_st_GENERAL_NAME;
typedef struct stack_st_GENERAL_SUBTREE stack_st_GENERAL_SUBTREE;
typedef struct stack_st_IPAddressFamily stack_st_IPAddressFamily;
typedef struct stack_st_X509_ALGOR stack_st_X509_ALGOR;
typedef struct stack_st_X509_ATTRIBUTE stack_st_X509_ATTRIBUTE;
typedef struct stack_st_X509_EXTENSION stack_st_X509_EXTENSION;
typedef struct stack_st_X509_NAME_ENTRY stack_st_X509_NAME_ENTRY;
typedef struct stack_st_void stack_st_void;
typedef struct stat64 stat64;
typedef struct termios termios;
typedef struct timespec timespec;
typedef struct timeval timeval;
typedef struct timezone timezone;
typedef struct tm tm;
typedef struct utsname utsname;
typedef struct x509_cert_aux_st x509_cert_aux_st;
typedef struct x509_cinf_st x509_cinf_st;
typedef struct x509_st x509_st;

/* ==================== Structures ==================== */

struct ASIdentifierChoice_st {
    int type;  // offset: 0x0
    _union_933 u;  // offset: 0x4
}; // size: 0x8

struct ASIdentifiers_st {
    ASIdentifierChoice * asnum;  // offset: 0x0
    ASIdentifierChoice * * rdi;  // offset: 0x4
}; // size: 0x8

struct ASN1_ENCODING_st {
    uchar * enc;  // offset: 0x0
    long len;  // offset: 0x4
    int modified;  // offset: 0x8
}; // size: 0xc

struct ASN1_VALUE_st {
    // Empty structure
}; // size: 0x1

struct AUTHORITY_KEYID_st {
    ASN1_OCTET_STRING * keyid;  // offset: 0x0
    GENERAL_NAMES * issuer;  // offset: 0x4
    ASN1_INTEGER * serial;  // offset: 0x8
}; // size: 0xc

struct CMAC_CTX_st {
    // Empty structure
}; // size: 0x1

struct DSA_SIG_st {
    BIGNUM * r;  // offset: 0x0
    BIGNUM * s;  // offset: 0x4
}; // size: 0x8

struct Elf32_Dyn_ARM {
    Elf32_DynTag_ARM d_tag;  // offset: 0x0
    dword d_val;  // offset: 0x4
}; // size: 0x8

struct Elf32_Ehdr {
    byte e_ident_magic_num;  // offset: 0x0
    string e_ident_magic_str;  // offset: 0x1
    byte e_ident_class;  // offset: 0x4
    byte e_ident_data;  // offset: 0x5
    byte e_ident_version;  // offset: 0x6
    byte e_ident_osabi;  // offset: 0x7
    byte e_ident_abiversion;  // offset: 0x8
    byte e_ident_pad[7];  // offset: 0x9
    word e_type;  // offset: 0x10
    word e_machine;  // offset: 0x12
    dword e_version;  // offset: 0x14
    dword e_entry;  // offset: 0x18
    dword e_phoff;  // offset: 0x1c
    dword e_shoff;  // offset: 0x20
    dword e_flags;  // offset: 0x24
    word e_ehsize;  // offset: 0x28
    word e_phentsize;  // offset: 0x2a
    word e_phnum;  // offset: 0x2c
    word e_shentsize;  // offset: 0x2e
    word e_shnum;  // offset: 0x30
    word e_shstrndx;  // offset: 0x32
}; // size: 0x34

struct Elf32_Phdr {
    Elf_ProgramHeaderType_ARM p_type;  // offset: 0x0
    dword p_offset;  // offset: 0x4
    dword p_vaddr;  // offset: 0x8
    dword p_paddr;  // offset: 0xc
    dword p_filesz;  // offset: 0x10
    dword p_memsz;  // offset: 0x14
    dword p_flags;  // offset: 0x18
    dword p_align;  // offset: 0x1c
}; // size: 0x20

struct Elf32_Rel {
    dword r_offset;  // offset: 0x0
    dword r_info;  // offset: 0x4
}; // size: 0x8

struct Elf32_Shdr {
    dword sh_name;  // offset: 0x0
    Elf_SectionHeaderType_ARM sh_type;  // offset: 0x4
    dword sh_flags;  // offset: 0x8
    dword sh_addr;  // offset: 0xc
    dword sh_offset;  // offset: 0x10
    dword sh_size;  // offset: 0x14
    dword sh_link;  // offset: 0x18
    dword sh_info;  // offset: 0x1c
    dword sh_addralign;  // offset: 0x20
    dword sh_entsize;  // offset: 0x24
}; // size: 0x28

struct Elf32_Sym {
    dword st_name;  // offset: 0x0
    dword st_value;  // offset: 0x4
    dword st_size;  // offset: 0x8
    byte st_info;  // offset: 0xc
    byte st_other;  // offset: 0xd
    word st_shndx;  // offset: 0xe
}; // size: 0x10

struct GnuBuildId {
    dword namesz;  // offset: 0x0
    dword descsz;  // offset: 0x4
    dword type;  // offset: 0x8
    string name;  // offset: 0xc
    byte hash[20];  // offset: 0x10
}; // size: 0x24

struct NAME_CONSTRAINTS_st {
    stack_st_GENERAL_SUBTREE * permittedSubtrees;  // offset: 0x0
    stack_st_GENERAL_SUBTREE * excludedSubtrees;  // offset: 0x4
}; // size: 0x8

struct NoteAbiTag {
    dword namesz;  // offset: 0x0
    dword descsz;  // offset: 0x4
    dword type;  // offset: 0x8
    string name;  // offset: 0xc
    dword abiType;  // offset: 0x10
    dword requiredKernelVersion[3];  // offset: 0x14
}; // size: 0x20

struct X509_POLICY_CACHE_st {
    // Empty structure
}; // size: 0x1

struct X509_algor_st {
    ASN1_OBJECT * algorithm;  // offset: 0x0
    ASN1_TYPE * parameter;  // offset: 0x4
}; // size: 0x8

struct X509_extension_st {
    ASN1_OBJECT * object;  // offset: 0x0
    ASN1_BOOLEAN critical;  // offset: 0x4
    ASN1_OCTET_STRING * value;  // offset: 0x8
}; // size: 0xc

struct X509_name_st {
    stack_st_X509_NAME_ENTRY * entries;  // offset: 0x0
    int modified;  // offset: 0x4
    BUF_MEM * bytes;  // offset: 0x8
    uchar * canon_enc;  // offset: 0xc
    int canon_enclen;  // offset: 0x10
}; // size: 0x14

struct X509_pubkey_st {
    X509_ALGOR * algor;  // offset: 0x0
    ASN1_BIT_STRING * public_key;  // offset: 0x4
    EVP_PKEY * pkey;  // offset: 0x8
}; // size: 0xc

struct X509_val_st {
    ASN1_TIME * notBefore;  // offset: 0x0
    ASN1_TIME * notAfter;  // offset: 0x4
}; // size: 0x8

struct _IO_FILE {
    int _flags;  // offset: 0x0
    char * _IO_read_ptr;  // offset: 0x4
    char * _IO_read_end;  // offset: 0x8
    char * _IO_read_base;  // offset: 0xc
    char * _IO_write_base;  // offset: 0x10
    char * _IO_write_ptr;  // offset: 0x14
    char * _IO_write_end;  // offset: 0x18
    char * _IO_buf_base;  // offset: 0x1c
    char * _IO_buf_end;  // offset: 0x20
    char * _IO_save_base;  // offset: 0x24
    char * _IO_backup_base;  // offset: 0x28
    char * _IO_save_end;  // offset: 0x2c
    _IO_marker * _markers;  // offset: 0x30
    _IO_FILE * _chain;  // offset: 0x34
    int _fileno;  // offset: 0x38
    int _flags2;  // offset: 0x3c
    __off_t _old_offset;  // offset: 0x40
    ushort _cur_column;  // offset: 0x44
    char _vtable_offset;  // offset: 0x46
    char _shortbuf[1];  // offset: 0x47
    _IO_lock_t * _lock;  // offset: 0x48
    __off64_t _offset;  // offset: 0x50
    void * __pad1;  // offset: 0x58
    void * __pad2;  // offset: 0x5c
    void * __pad3;  // offset: 0x60
    void * __pad4;  // offset: 0x64
    size_t __pad5;  // offset: 0x68
    int _mode;  // offset: 0x6c
    char _unused2[40];  // offset: 0x70
}; // size: 0x98

struct _IO_marker {
    _IO_marker * _next;  // offset: 0x0
    _IO_FILE * _sbuf;  // offset: 0x4
    int _pos;  // offset: 0x8
}; // size: 0xc

struct __dirstream {
    // Empty structure
}; // size: 0x1

struct __pthread_internal_slist {
    __pthread_internal_slist * __next;  // offset: 0x0
}; // size: 0x4

struct __pthread_mutex_s {
    int __lock;  // offset: 0x0
    uint __count;  // offset: 0x4
    int __owner;  // offset: 0x8
    int __kind;  // offset: 0xc
    uint __nusers;  // offset: 0x10
    _union_13 field_20;  // offset: 0x14
}; // size: 0x18

struct __sigset_t {
    ulong __val[32];  // offset: 0x0
}; // size: 0x80

struct _struct_1032 {
    __pid_t si_pid;  // offset: 0x0
    __uid_t si_uid;  // offset: 0x4
}; // size: 0x8

struct _struct_1033 {
    int si_tid;  // offset: 0x0
    int si_overrun;  // offset: 0x4
    sigval_t si_sigval;  // offset: 0x8
}; // size: 0xc

struct _struct_1034 {
    __pid_t si_pid;  // offset: 0x0
    __uid_t si_uid;  // offset: 0x4
    sigval_t si_sigval;  // offset: 0x8
}; // size: 0xc

struct _struct_1035 {
    __pid_t si_pid;  // offset: 0x0
    __uid_t si_uid;  // offset: 0x4
    int si_status;  // offset: 0x8
    __clock_t si_utime;  // offset: 0xc
    __clock_t si_stime;  // offset: 0x10
}; // size: 0x14

struct _struct_1036 {
    void * si_addr;  // offset: 0x0
}; // size: 0x4

struct _struct_1037 {
    long si_band;  // offset: 0x0
    int si_fd;  // offset: 0x4
}; // size: 0x8

struct addrinfo {
    int ai_flags;  // offset: 0x0
    int ai_family;  // offset: 0x4
    int ai_socktype;  // offset: 0x8
    int ai_protocol;  // offset: 0xc
    socklen_t ai_addrlen;  // offset: 0x10
    sockaddr * ai_addr;  // offset: 0x14
    char * ai_canonname;  // offset: 0x18
    addrinfo * ai_next;  // offset: 0x1c
}; // size: 0x20

struct asn1_object_st {
    char * sn;  // offset: 0x0
    char * * ln;  // offset: 0x4
    int nid;  // offset: 0x8
    int length;  // offset: 0xc
    uchar * data;  // offset: 0x10
    int flags;  // offset: 0x14
}; // size: 0x18

struct asn1_string_st {
    int length;  // offset: 0x0
    int type;  // offset: 0x4
    uchar * data;  // offset: 0x8
    long flags;  // offset: 0xc
}; // size: 0x10

struct asn1_type_st {
    int type;  // offset: 0x0
    _union_263 value;  // offset: 0x4
}; // size: 0x8

struct bignum_ctx {
    // Empty structure
}; // size: 0x1

struct bignum_st {
    ulong * d;  // offset: 0x0
    int top;  // offset: 0x4
    int dmax;  // offset: 0x8
    int neg;  // offset: 0xc
    int flags;  // offset: 0x10
}; // size: 0x14

struct bio_method_st {
    int type;  // offset: 0x0
    char * name;  // offset: 0x4
    _func_737 * bwrite;  // offset: 0x8
    _func_738 * bread;  // offset: 0xc
    _func_739 * bputs;  // offset: 0x10
    _func_740 * bgets;  // offset: 0x14
    _func_741 * ctrl;  // offset: 0x18
    _func_742 * create;  // offset: 0x1c
    _func_743 * destroy;  // offset: 0x20
    _func_744 * callback_ctrl;  // offset: 0x24
}; // size: 0x28

struct bio_st {
    BIO_METHOD * method;  // offset: 0x0
    _func_745 * callback;  // offset: 0x4
    char * cb_arg;  // offset: 0x8
    int init;  // offset: 0xc
    int shutdown;  // offset: 0x10
    int flags;  // offset: 0x14
    int retry_reason;  // offset: 0x18
    int num;  // offset: 0x1c
    void * ptr;  // offset: 0x20
    bio_st * next_bio;  // offset: 0x24
    bio_st * prev_bio;  // offset: 0x28
    int references;  // offset: 0x2c
    ulong num_read;  // offset: 0x30
    ulong num_write;  // offset: 0x34
    CRYPTO_EX_DATA ex_data;  // offset: 0x38
}; // size: 0x40

struct bn_blinding_st {
    // Empty structure
}; // size: 0x1

struct bn_gencb_st {
    uint ver;  // offset: 0x0
    void * arg;  // offset: 0x4
    _union_181 cb;  // offset: 0x8
}; // size: 0xc

struct bn_mont_ctx_st {
    int ri;  // offset: 0x0
    BIGNUM RR;  // offset: 0x4
    BIGNUM N;  // offset: 0x18
    BIGNUM Ni;  // offset: 0x2c
    ulong n0[2];  // offset: 0x40
    int flags;  // offset: 0x48
}; // size: 0x4c

struct buf_mem_st {
    size_t length;  // offset: 0x0
    char * data;  // offset: 0x4
    size_t max;  // offset: 0x8
}; // size: 0xc

struct crypto_ex_data_st {
    stack_st_void * sk;  // offset: 0x0
    int dummy;  // offset: 0x4
}; // size: 0x8

struct dh_method {
    char * name;  // offset: 0x0
    _func_1843 * generate_key;  // offset: 0x4
    _func_1844 * compute_key;  // offset: 0x8
    _func_1845 * bn_mod_exp;  // offset: 0xc
    _func_1846 * init;  // offset: 0x10
    _func_1847 * finish;  // offset: 0x14
    int flags;  // offset: 0x18
    char * app_data;  // offset: 0x1c
    _func_1848 * generate_params;  // offset: 0x20
}; // size: 0x24

struct dh_st {
    int pad;  // offset: 0x0
    int version;  // offset: 0x4
    BIGNUM * p;  // offset: 0x8
    BIGNUM * g;  // offset: 0xc
    long length;  // offset: 0x10
    BIGNUM * pub_key;  // offset: 0x14
    BIGNUM * priv_key;  // offset: 0x18
    int flags;  // offset: 0x1c
    BN_MONT_CTX * method_mont_p;  // offset: 0x20
    BIGNUM * q;  // offset: 0x24
    BIGNUM * j;  // offset: 0x28
    uchar * seed;  // offset: 0x2c
    int seedlen;  // offset: 0x30
    BIGNUM * counter;  // offset: 0x34
    int references;  // offset: 0x38
    CRYPTO_EX_DATA ex_data;  // offset: 0x3c
    DH_METHOD * meth;  // offset: 0x44
    ENGINE * engine;  // offset: 0x48
}; // size: 0x4c

struct dirent64 {
    __ino64_t d_ino;  // offset: 0x0
    __off64_t d_off;  // offset: 0x8
    ushort d_reclen;  // offset: 0x10
    uchar d_type;  // offset: 0x12
    char d_name[256];  // offset: 0x13
}; // size: 0x118

struct dsa_method {
    char * name;  // offset: 0x0
    _func_1875 * dsa_do_sign;  // offset: 0x4
    _func_1876 * dsa_sign_setup;  // offset: 0x8
    _func_1877 * dsa_do_verify;  // offset: 0xc
    _func_1878 * dsa_mod_exp;  // offset: 0x10
    _func_1879 * bn_mod_exp;  // offset: 0x14
    _func_1880 * init;  // offset: 0x18
    _func_1881 * finish;  // offset: 0x1c
    int flags;  // offset: 0x20
    char * app_data;  // offset: 0x24
    _func_1882 * dsa_paramgen;  // offset: 0x28
    _func_1883 * dsa_keygen;  // offset: 0x2c
}; // size: 0x30

struct dsa_st {
    int pad;  // offset: 0x0
    long version;  // offset: 0x4
    int write_params;  // offset: 0x8
    BIGNUM * p;  // offset: 0xc
    BIGNUM * q;  // offset: 0x10
    BIGNUM * g;  // offset: 0x14
    BIGNUM * pub_key;  // offset: 0x18
    BIGNUM * priv_key;  // offset: 0x1c
    BIGNUM * kinv;  // offset: 0x20
    BIGNUM * r;  // offset: 0x24
    int flags;  // offset: 0x28
    BN_MONT_CTX * method_mont_p;  // offset: 0x2c
    int references;  // offset: 0x30
    CRYPTO_EX_DATA ex_data;  // offset: 0x34
    DSA_METHOD * meth;  // offset: 0x3c
    ENGINE * engine;  // offset: 0x40
}; // size: 0x44

struct ec_key_st {
    // Empty structure
}; // size: 0x1

struct engine_st {
    // Empty structure
}; // size: 0x1

struct env_md_ctx_st {
    EVP_MD * digest;  // offset: 0x0
    ENGINE * engine;  // offset: 0x4
    ulong flags;  // offset: 0x8
    void * md_data;  // offset: 0xc
    EVP_PKEY_CTX * pctx;  // offset: 0x10
    _func_1230 * update;  // offset: 0x14
}; // size: 0x18

struct env_md_st {
    int type;  // offset: 0x0
    int pkey_type;  // offset: 0x4
    int md_size;  // offset: 0x8
    ulong flags;  // offset: 0xc
    _func_1220 * init;  // offset: 0x10
    _func_1221 * update;  // offset: 0x14
    _func_1222 * final;  // offset: 0x18
    _func_1223 * copy;  // offset: 0x1c
    _func_1224 * cleanup;  // offset: 0x20
    _func_1225 * sign;  // offset: 0x24
    _func_1226 * verify;  // offset: 0x28
    int required_pkey_type[5];  // offset: 0x2c
    int block_size;  // offset: 0x40
    int ctx_size;  // offset: 0x44
    _func_1227 * md_ctrl;  // offset: 0x48
}; // size: 0x4c

struct evp_cipher_ctx_st {
    EVP_CIPHER * cipher;  // offset: 0x0
    ENGINE * engine;  // offset: 0x4
    int encrypt;  // offset: 0x8
    int buf_len;  // offset: 0xc
    uchar oiv[16];  // offset: 0x10
    uchar iv[16];  // offset: 0x20
    uchar buf[32];  // offset: 0x30
    int num;  // offset: 0x50
    void * app_data;  // offset: 0x54
    int key_len;  // offset: 0x58
    ulong flags;  // offset: 0x5c
    void * cipher_data;  // offset: 0x60
    int final_used;  // offset: 0x64
    int block_mask;  // offset: 0x68
    uchar final[32];  // offset: 0x6c
}; // size: 0x8c

struct evp_cipher_st {
    int nid;  // offset: 0x0
    int block_size;  // offset: 0x4
    int key_len;  // offset: 0x8
    int iv_len;  // offset: 0xc
    ulong flags;  // offset: 0x10
    _func_1231 * init;  // offset: 0x14
    _func_1232 * do_cipher;  // offset: 0x18
    _func_1233 * cleanup;  // offset: 0x1c
    int ctx_size;  // offset: 0x20
    _func_1234 * set_asn1_parameters;  // offset: 0x24
    _func_1235 * get_asn1_parameters;  // offset: 0x28
    _func_1236 * ctrl;  // offset: 0x2c
    void * app_data;  // offset: 0x30
}; // size: 0x34

struct evp_pkey_asn1_method_st {
    // Empty structure
}; // size: 0x1

struct evp_pkey_ctx_st {
    // Empty structure
}; // size: 0x1

struct evp_pkey_st {
    int type;  // offset: 0x0
    int save_type;  // offset: 0x4
    int references;  // offset: 0x8
    EVP_PKEY_ASN1_METHOD * ameth;  // offset: 0xc
    ENGINE * engine;  // offset: 0x10
    _union_277 pkey;  // offset: 0x14
    int save_parameters;  // offset: 0x18
    stack_st_X509_ATTRIBUTE * attributes;  // offset: 0x1c
}; // size: 0x20

struct fd_set {
    __fd_mask fds_bits[32];  // offset: 0x0
}; // size: 0x80

struct iovec {
    void * iov_base;  // offset: 0x0
    size_t iov_len;  // offset: 0x4
}; // size: 0x8

struct itimerval {
    timeval it_interval;  // offset: 0x0
    timeval it_value;  // offset: 0x8
}; // size: 0x10

struct msghdr {
    void * msg_name;  // offset: 0x0
    socklen_t msg_namelen;  // offset: 0x4
    iovec * msg_iov;  // offset: 0x8
    size_t msg_iovlen;  // offset: 0xc
    void * msg_control;  // offset: 0x10
    size_t msg_controllen;  // offset: 0x14
    int msg_flags;  // offset: 0x18
}; // size: 0x1c

struct pollfd {
    int fd;  // offset: 0x0
    short events;  // offset: 0x4
    short revents;  // offset: 0x6
}; // size: 0x8

struct rlimit64 {
    rlim64_t rlim_cur;  // offset: 0x0
    rlim64_t rlim_max;  // offset: 0x8
}; // size: 0x10

struct rsa_meth_st {
    char * name;  // offset: 0x0
    _func_1760 * rsa_pub_enc;  // offset: 0x4
    _func_1761 * rsa_pub_dec;  // offset: 0x8
    _func_1762 * rsa_priv_enc;  // offset: 0xc
    _func_1763 * rsa_priv_dec;  // offset: 0x10
    _func_1764 * rsa_mod_exp;  // offset: 0x14
    _func_1765 * bn_mod_exp;  // offset: 0x18
    _func_1766 * init;  // offset: 0x1c
    _func_1767 * finish;  // offset: 0x20
    int flags;  // offset: 0x24
    char * app_data;  // offset: 0x28
    _func_1768 * rsa_sign;  // offset: 0x2c
    _func_1769 * rsa_verify;  // offset: 0x30
    _func_1770 * rsa_keygen;  // offset: 0x34
}; // size: 0x38

struct rsa_st {
    int pad;  // offset: 0x0
    long version;  // offset: 0x4
    RSA_METHOD * meth;  // offset: 0x8
    ENGINE * engine;  // offset: 0xc
    BIGNUM * n;  // offset: 0x10
    BIGNUM * e;  // offset: 0x14
    BIGNUM * d;  // offset: 0x18
    BIGNUM * p;  // offset: 0x1c
    BIGNUM * q;  // offset: 0x20
    BIGNUM * dmp1;  // offset: 0x24
    BIGNUM * dmq1;  // offset: 0x28
    BIGNUM * iqmp;  // offset: 0x2c
    CRYPTO_EX_DATA ex_data;  // offset: 0x30
    int references;  // offset: 0x38
    int flags;  // offset: 0x3c
    BN_MONT_CTX * _method_mod_n;  // offset: 0x40
    BN_MONT_CTX * _method_mod_p;  // offset: 0x44
    BN_MONT_CTX * _method_mod_q;  // offset: 0x48
    char * bignum_data;  // offset: 0x4c
    BN_BLINDING * blinding;  // offset: 0x50
    BN_BLINDING * mt_blinding;  // offset: 0x54
}; // size: 0x58

struct sched_param {
    int __sched_priority;  // offset: 0x0
}; // size: 0x4

struct sigaction {
    _union_1051 __sigaction_handler;  // offset: 0x0
    __sigset_t sa_mask;  // offset: 0x4
    int sa_flags;  // offset: 0x84
    _func_4849 * sa_restorer;  // offset: 0x88
}; // size: 0x8c

struct siginfo {
    int si_signo;  // offset: 0x0
    int si_errno;  // offset: 0x4
    int si_code;  // offset: 0x8
    _union_1031 _sifields;  // offset: 0xc
}; // size: 0x80

struct sockaddr {
    sa_family_t sa_family;  // offset: 0x0
    char sa_data[14];  // offset: 0x2
}; // size: 0x10

struct stack_st {
    int num;  // offset: 0x0
    char * * data;  // offset: 0x4
    int sorted;  // offset: 0x8
    int num_alloc;  // offset: 0xc
    _func_290 * comp;  // offset: 0x10
}; // size: 0x14

struct stack_st_ASIdOrRange {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_ASN1_OBJECT {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_DIST_POINT {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_GENERAL_NAME {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_GENERAL_SUBTREE {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_IPAddressFamily {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_ALGOR {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_ATTRIBUTE {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_EXTENSION {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_NAME_ENTRY {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_void {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stat64 {
    __dev_t st_dev;  // offset: 0x0
    uint __pad1;  // offset: 0x8
    __ino_t __st_ino;  // offset: 0xc
    __mode_t st_mode;  // offset: 0x10
    __nlink_t st_nlink;  // offset: 0x14
    __uid_t st_uid;  // offset: 0x18
    __gid_t st_gid;  // offset: 0x1c
    __dev_t st_rdev;  // offset: 0x20
    uint __pad2;  // offset: 0x28
    __off64_t st_size;  // offset: 0x30
    __blksize_t st_blksize;  // offset: 0x38
    __blkcnt64_t st_blocks;  // offset: 0x40
    timespec st_atim;  // offset: 0x48
    timespec st_mtim;  // offset: 0x50
    timespec st_ctim;  // offset: 0x58
    __ino64_t st_ino;  // offset: 0x60
}; // size: 0x68

struct termios {
    tcflag_t c_iflag;  // offset: 0x0
    tcflag_t c_oflag;  // offset: 0x4
    tcflag_t c_cflag;  // offset: 0x8
    tcflag_t c_lflag;  // offset: 0xc
    cc_t c_line;  // offset: 0x10
    cc_t c_cc[32];  // offset: 0x11
    speed_t c_ispeed;  // offset: 0x34
    speed_t c_ospeed;  // offset: 0x38
}; // size: 0x3c

struct timespec {
    __time_t tv_sec;  // offset: 0x0
    long tv_nsec;  // offset: 0x4
}; // size: 0x8

struct timeval {
    __time_t tv_sec;  // offset: 0x0
    __suseconds_t tv_usec;  // offset: 0x4
}; // size: 0x8

struct timezone {
    int tz_minuteswest;  // offset: 0x0
    int tz_dsttime;  // offset: 0x4
}; // size: 0x8

struct tm {
    int tm_sec;  // offset: 0x0
    int tm_min;  // offset: 0x4
    int tm_hour;  // offset: 0x8
    int tm_mday;  // offset: 0xc
    int tm_mon;  // offset: 0x10
    int tm_year;  // offset: 0x14
    int tm_wday;  // offset: 0x18
    int tm_yday;  // offset: 0x1c
    int tm_isdst;  // offset: 0x20
    long tm_gmtoff;  // offset: 0x24
    char * tm_zone;  // offset: 0x28
}; // size: 0x2c

struct utsname {
    char sysname[65];  // offset: 0x0
    char nodename[65];  // offset: 0x41
    char release[65];  // offset: 0x82
    char version[65];  // offset: 0xc3
    char machine[65];  // offset: 0x104
    char domainname[65];  // offset: 0x145
}; // size: 0x186

struct x509_cert_aux_st {
    stack_st_ASN1_OBJECT * trust;  // offset: 0x0
    stack_st_ASN1_OBJECT * reject;  // offset: 0x4
    ASN1_UTF8STRING * alias;  // offset: 0x8
    ASN1_OCTET_STRING * keyid;  // offset: 0xc
    stack_st_X509_ALGOR * other;  // offset: 0x10
}; // size: 0x14

struct x509_cinf_st {
    ASN1_INTEGER * version;  // offset: 0x0
    ASN1_INTEGER * serialNumber;  // offset: 0x4
    X509_ALGOR * signature;  // offset: 0x8
    X509_NAME * issuer;  // offset: 0xc
    X509_VAL * validity;  // offset: 0x10
    X509_NAME * subject;  // offset: 0x14
    X509_PUBKEY * key;  // offset: 0x18
    ASN1_BIT_STRING * issuerUID;  // offset: 0x1c
    ASN1_BIT_STRING * subjectUID;  // offset: 0x20
    stack_st_X509_EXTENSION * extensions;  // offset: 0x24
    ASN1_ENCODING enc;  // offset: 0x28
}; // size: 0x34

struct x509_st {
    X509_CINF * cert_info;  // offset: 0x0
    X509_ALGOR * sig_alg;  // offset: 0x4
    ASN1_BIT_STRING * signature;  // offset: 0x8
    int valid;  // offset: 0xc
    int references;  // offset: 0x10
    char * name;  // offset: 0x14
    CRYPTO_EX_DATA ex_data;  // offset: 0x18
    long ex_pathlen;  // offset: 0x20
    long ex_pcpathlen;  // offset: 0x24
    ulong ex_flags;  // offset: 0x28
    ulong ex_kusage;  // offset: 0x2c
    ulong ex_xkusage;  // offset: 0x30
    ulong ex_nscert;  // offset: 0x34
    ASN1_OCTET_STRING * skid;  // offset: 0x38
    AUTHORITY_KEYID * akid;  // offset: 0x3c
    X509_POLICY_CACHE * policy_cache;  // offset: 0x40
    stack_st_DIST_POINT * crldp;  // offset: 0x44
    stack_st_GENERAL_NAME * altname;  // offset: 0x48
    NAME_CONSTRAINTS * nc;  // offset: 0x4c
    stack_st_IPAddressFamily * rfc3779_addr;  // offset: 0x50
    ASIdentifiers_st * rfc3779_asid;  // offset: 0x54
    uchar sha1_hash[20];  // offset: 0x58
    X509_CERT_AUX * aux;  // offset: 0x6c
}; // size: 0x70

/* ==================== Unions ==================== */

union _union_1031 {
    int[29] _pad;
    _struct_1032 _kill;
    _struct_1033 _timer;
    _struct_1034 _rt;
    _struct_1035 _sigchld;
    _struct_1036 _sigfault;
    _struct_1037 _sigpoll;
}; // size: 0x74

union _union_1051 {
    __sighandler_t sa_handler;
    _func_4848 * sa_sigaction;
}; // size: 0x4

union _union_13 {
    int __spins;
    __pthread_slist_t __list;
}; // size: 0x4

union _union_181 {
    _func_556 * cb_1;
    _func_557 * cb_2;
}; // size: 0x4

union _union_263 {
    char * ptr;
    ASN1_BOOLEAN boolean;
    ASN1_STRING * asn1_string;
    ASN1_OBJECT * object;
    ASN1_INTEGER * integer;
    ASN1_ENUMERATED * enumerated;
    ASN1_BIT_STRING * bit_string;
    ASN1_OCTET_STRING * octet_string;
    ASN1_PRINTABLESTRING * printablestring;
    ASN1_T61STRING * t61string;
    ASN1_IA5STRING * ia5string;
    ASN1_GENERALSTRING * generalstring;
    ASN1_BMPSTRING * bmpstring;
    ASN1_UNIVERSALSTRING * universalstring;
    ASN1_UTCTIME * utctime;
    ASN1_GENERALIZEDTIME * generalizedtime;
    ASN1_VISIBLESTRING * visiblestring;
    ASN1_UTF8STRING * utf8string;
    ASN1_STRING * set;
    ASN1_STRING * sequence;
    ASN1_VALUE * asn1_value;
}; // size: 0x4

union _union_277 {
    char * ptr;
    rsa_st * rsa;
    dsa_st * dsa;
    dh_st * dh;
    ec_key_st * ec;
}; // size: 0x4

union _union_933 {
    ASN1_NULL * inherit;
    ASIdOrRanges * asIdsOrRanges;
}; // size: 0x4

union pthread_attr_t {
    char[36] __size;
    long __align;
}; // size: 0x24

union pthread_mutex_t {
    __pthread_mutex_s __data;
    char[24] __size;
    long __align;
}; // size: 0x18

union pthread_mutexattr_t {
    char[4] __size;
    int __align;
}; // size: 0x4

union sem_t {
    char[16] __size;
    long __align;
}; // size: 0x10

union sigval {
    int sival_int;
    void * sival_ptr;
}; // size: 0x4

/* ==================== Type Definitions ==================== */

typedef stack_st_ASIdOrRange ASIdOrRanges;
typedef ASIdentifierChoice_st ASIdentifierChoice;
typedef asn1_string_st ASN1_BIT_STRING;
typedef asn1_string_st ASN1_BMPSTRING;
typedef int ASN1_BOOLEAN;
typedef ASN1_ENCODING_st ASN1_ENCODING;
typedef asn1_string_st ASN1_ENUMERATED;
typedef asn1_string_st ASN1_GENERALIZEDTIME;
typedef asn1_string_st ASN1_GENERALSTRING;
typedef asn1_string_st ASN1_IA5STRING;
typedef asn1_string_st ASN1_INTEGER;
typedef int ASN1_NULL;
typedef asn1_object_st ASN1_OBJECT;
typedef asn1_string_st ASN1_OCTET_STRING;
typedef asn1_string_st ASN1_PRINTABLESTRING;
typedef asn1_string_st ASN1_STRING;
typedef asn1_string_st ASN1_T61STRING;
typedef asn1_string_st ASN1_TIME;
typedef asn1_type_st ASN1_TYPE;
typedef asn1_string_st ASN1_UNIVERSALSTRING;
typedef asn1_string_st ASN1_UTCTIME;
typedef asn1_string_st ASN1_UTF8STRING;
typedef ASN1_VALUE_st ASN1_VALUE;
typedef asn1_string_st ASN1_VISIBLESTRING;
typedef AUTHORITY_KEYID_st AUTHORITY_KEYID;
typedef bignum_st BIGNUM;
typedef bio_st BIO;
typedef bio_method_st BIO_METHOD;
typedef bn_blinding_st BN_BLINDING;
typedef bignum_ctx BN_CTX;
typedef bn_gencb_st BN_GENCB;
typedef bn_mont_ctx_st BN_MONT_CTX;
typedef buf_mem_st BUF_MEM;
typedef CMAC_CTX_st CMAC_CTX;
typedef crypto_ex_data_st CRYPTO_EX_DATA;
typedef dh_st DH;
typedef dh_method DH_METHOD;
typedef __dirstream DIR;
typedef dsa_st DSA;
typedef dsa_method DSA_METHOD;
typedef DSA_SIG_st DSA_SIG;
typedef engine_st ENGINE;
typedef evp_cipher_st EVP_CIPHER;
typedef evp_cipher_ctx_st EVP_CIPHER_CTX;
typedef env_md_st EVP_MD;
typedef env_md_ctx_st EVP_MD_CTX;
typedef evp_pkey_st EVP_PKEY;
typedef evp_pkey_asn1_method_st EVP_PKEY_ASN1_METHOD;
typedef evp_pkey_ctx_st EVP_PKEY_CTX;
typedef _IO_FILE FILE;
typedef stack_st_GENERAL_NAME GENERAL_NAMES;
typedef NAME_CONSTRAINTS_st NAME_CONSTRAINTS;
typedef rsa_st RSA;
typedef rsa_meth_st RSA_METHOD;
typedef x509_st X509;
typedef X509_algor_st X509_ALGOR;
typedef x509_cert_aux_st X509_CERT_AUX;
typedef x509_cinf_st X509_CINF;
typedef X509_extension_st X509_EXTENSION;
typedef X509_name_st X509_NAME;
typedef X509_POLICY_CACHE_st X509_POLICY_CACHE;
typedef X509_pubkey_st X509_PUBKEY;
typedef X509_val_st X509_VAL;
typedef void _IO_lock_t;
typedef stack_st _STACK;
typedef __quad_t __blkcnt64_t;
typedef long __blksize_t;
typedef long __clock_t;
typedef int __clockid_t;
typedef __compar_fn_t * __compar_fn_t;
typedef __u_quad_t __dev_t;
typedef long __fd_mask;
typedef uint __gid_t;
typedef uint __id_t;
typedef __u_quad_t __ino64_t;
typedef ulong __ino_t;
typedef int __int32_t;
typedef __itimer_which __itimer_which_t;
typedef uint __mode_t;
typedef uint __nlink_t;
typedef __quad_t __off64_t;
typedef long __off_t;
typedef int __pid_t;
typedef __priority_which __priority_which_t;
typedef __pthread_internal_slist __pthread_slist_t;
typedef longlong __quad_t;
typedef __u_quad_t __rlim64_t;
typedef __rlimit_resource __rlimit_resource_t;
typedef __sighandler_t * __sighandler_t;
typedef uint __socklen_t;
typedef int __ssize_t;
typedef long __suseconds_t;
typedef long __time_t;
typedef timezone * __timezone_ptr_t;
typedef ulonglong __u_quad_t;
typedef uint __uid_t;
typedef bio_info_cb bio_info_cb;
typedef uchar cc_t;
typedef __clockid_t clockid_t;
typedef __id_t id_t;
typedef ulong nfds_t;
typedef pem_password_cb pem_password_cb;
typedef int pthread_once_t;
typedef ulong pthread_t;
typedef __rlim64_t rlim64_t;
typedef ushort sa_family_t;
typedef siginfo siginfo_t;
typedef __sigset_t sigset_t;
typedef sigval sigval_t;
typedef ulong size_t;
typedef __socklen_t socklen_t;
typedef uint speed_t;
typedef __ssize_t ssize_t;
typedef uint tcflag_t;
typedef __time_t time_t;

/* ==================== Function Prototypes ==================== */

int __compar_fn_t(void * param0, void * param1);
void __init_routine(void);
void __sighandler_t(int param0);
void * __start_routine(void * param0);
int _func_1220(EVP_MD_CTX * ctx);
int _func_1221(EVP_MD_CTX * ctx, void * data, size_t count);
int _func_1222(EVP_MD_CTX * ctx, uchar * md);
int _func_1223(EVP_MD_CTX * to, EVP_MD_CTX * from);
int _func_1224(EVP_MD_CTX * ctx);
int _func_1225(int type, uchar * m, uint m_length, uchar * sigret, uint * siglen, void * key);
int _func_1226(int type, uchar * m, uint m_length, uchar * sigbuf, uint siglen, void * key);
int _func_1227(EVP_MD_CTX * ctx, int cmd, int p1, void * p2);
int _func_1230(EVP_MD_CTX * ctx, void * data, size_t count);
int _func_1231(EVP_CIPHER_CTX * ctx, uchar * key, uchar * iv, int enc);
int _func_1232(EVP_CIPHER_CTX * ctx, uchar * out, uchar * in, size_t inl);
int _func_1233(EVP_CIPHER_CTX * param0);
int _func_1234(EVP_CIPHER_CTX * param0, ASN1_TYPE * param1);
int _func_1235(EVP_CIPHER_CTX * param0, ASN1_TYPE * param1);
int _func_1236(EVP_CIPHER_CTX * param0, int type, int arg, void * ptr);
int _func_1760(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1761(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1762(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1763(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1764(BIGNUM * r0, BIGNUM * I, RSA * rsa, BN_CTX * ctx);
int _func_1765(BIGNUM * r, BIGNUM * a, BIGNUM * p, BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int _func_1766(RSA * rsa);
int _func_1767(RSA * rsa);
int _func_1768(int type, uchar * m, uint m_length, uchar * sigret, uint * siglen, RSA * rsa);
int _func_1769(int dtype, uchar * m, uint m_length, uchar * sigbuf, uint siglen, RSA * rsa);
int _func_1770(RSA * rsa, int bits, BIGNUM * e, BN_GENCB * cb);
int _func_1843(DH * dh);
int _func_1844(uchar * key, BIGNUM * pub_key, DH * dh);
int _func_1845(DH * dh, BIGNUM * r, BIGNUM * a, BIGNUM * p, BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int _func_1846(DH * dh);
int _func_1847(DH * dh);
int _func_1848(DH * dh, int prime_len, int generator, BN_GENCB * cb);
DSA_SIG * _func_1875(uchar * dgst, int dlen, DSA * dsa);
int _func_1876(DSA * dsa, BN_CTX * ctx_in, BIGNUM * * kinvp, BIGNUM * * rp);
int _func_1877(uchar * dgst, int dgst_len, DSA_SIG * sig, DSA * dsa);
int _func_1878(DSA * dsa, BIGNUM * rr, BIGNUM * a1, BIGNUM * p1, BIGNUM * a2, BIGNUM * p2, BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * in_mont);
int _func_1879(DSA * dsa, BIGNUM * r, BIGNUM * a, BIGNUM * p, BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int _func_1880(DSA * dsa);
int _func_1881(DSA * dsa);
int _func_1882(DSA * dsa, int bits, uchar * seed, int seed_len, int * counter_ret, ulong * h_ret, BN_GENCB * cb);
int _func_1883(DSA * dsa);
int _func_290(void * param0, void * param1);
void _func_4848(int param0, siginfo_t * param1, void * param2);
void _func_4849(void);
void _func_556(int param0, int param1, void * param2);
int _func_557(int param0, int param1, BN_GENCB * param2);
int _func_737(BIO * param0, char * param1, int param2);
int _func_738(BIO * param0, char * param1, int param2);
int _func_739(BIO * param0, char * param1);
int _func_740(BIO * param0, char * param1, int param2);
long _func_741(BIO * param0, int param1, long param2, void * param3);
int _func_742(BIO * param0);
int _func_743(BIO * param0);
long _func_744(BIO * param0, int param1, bio_info_cb * param2);
long _func_745(bio_st * param0, int param1, char * param2, int param3, long param4, long param5);
void bio_info_cb(bio_st * param0, int param1, char * param2, int param3, long param4, long param5);
int pem_password_cb(char * buf, int size, int rwflag, void * userdata);

#endif // NTPD_AFC43AFA4305FCB9_TYPES_H
