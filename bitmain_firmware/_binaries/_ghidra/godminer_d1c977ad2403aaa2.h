// Data types exported from: godminer_d1c977ad2403aaa2
// Generated by Ghidra

#ifndef GODMINER_D1C977AD2403AAA2_TYPES_H
#define GODMINER_D1C977AD2403AAA2_TYPES_H

#include <stdint.h>
#include <stdbool.h>

/* ==================== Enumerations ==================== */

typedef enum {
    DT_NULL = 0,
    DT_NEEDED = 1,
    DT_PLTRELSZ = 2,
    DT_PLTGOT = 3,
    DT_HASH = 4,
    DT_STRTAB = 5,
    DT_SYMTAB = 6,
    DT_RELA = 7,
    DT_RELASZ = 8,
    DT_RELAENT = 9,
    DT_STRSZ = 10,
    DT_SYMENT = 11,
    DT_INIT = 12,
    DT_FINI = 13,
    DT_SONAME = 14,
    DT_RPATH = 15,
    DT_SYMBOLIC = 16,
    DT_REL = 17,
    DT_RELSZ = 18,
    DT_RELENT = 19,
    DT_PLTREL = 20,
    DT_DEBUG = 21,
    DT_TEXTREL = 22,
    DT_JMPREL = 23,
    DT_BIND_NOW = 24,
    DT_INIT_ARRAY = 25,
    DT_FINI_ARRAY = 26,
    DT_INIT_ARRAYSZ = 27,
    DT_FINI_ARRAYSZ = 28,
    DT_RUNPATH = 29,
    DT_FLAGS = 30,
    DT_PREINIT_ARRAY = 32,
    DT_PREINIT_ARRAYSZ = 33,
    DT_RELRSZ = 35,
    DT_RELR = 36,
    DT_RELRENT = 37,
    DT_ANDROID_REL = 1610612751,
    DT_ANDROID_RELSZ = 1610612752,
    DT_ANDROID_RELA = 1610612753,
    DT_ANDROID_RELASZ = 1610612754,
    DT_ANDROID_RELR = 1879040000,
    DT_ANDROID_RELRSZ = 1879040001,
    DT_ANDROID_RELRENT = 1879040003,
    DT_GNU_PRELINKED = 1879047669,
    DT_GNU_CONFLICTSZ = 1879047670,
    DT_GNU_LIBLISTSZ = 1879047671,
    DT_CHECKSUM = 1879047672,
    DT_PLTPADSZ = 1879047673,
    DT_MOVEENT = 1879047674,
    DT_MOVESZ = 1879047675,
    DT_FEATURE_1 = 1879047676,
    DT_POSFLAG_1 = 1879047677,
    DT_SYMINSZ = 1879047678,
    DT_SYMINENT = 1879047679,
    DT_GNU_XHASH = 1879047924,
    DT_GNU_HASH = 1879047925,
    DT_TLSDESC_PLT = 1879047926,
    DT_TLSDESC_GOT = 1879047927,
    DT_GNU_CONFLICT = 1879047928,
    DT_GNU_LIBLIST = 1879047929,
    DT_CONFIG = 1879047930,
    DT_DEPAUDIT = 1879047931,
    DT_AUDIT = 1879047932,
    DT_PLTPAD = 1879047933,
    DT_MOVETAB = 1879047934,
    DT_SYMINFO = 1879047935,
    DT_VERSYM = 1879048176,
    DT_RELACOUNT = 1879048185,
    DT_RELCOUNT = 1879048186,
    DT_FLAGS_1 = 1879048187,
    DT_VERDEF = 1879048188,
    DT_VERDEFNUM = 1879048189,
    DT_VERNEED = 1879048190,
    DT_VERNEEDNUM = 1879048191,
    DT_AUXILIARY = 2147483645,
    DT_FILTER = 2147483647,
} Elf32_DynTag_ARM;

typedef enum {
    PT_NULL = 0,
    PT_LOAD = 1,
    PT_DYNAMIC = 2,
    PT_INTERP = 3,
    PT_NOTE = 4,
    PT_SHLIB = 5,
    PT_PHDR = 6,
    PT_TLS = 7,
    PT_GNU_EH_FRAME = 1685382480,
    PT_GNU_STACK = 1685382481,
    PT_GNU_RELRO = 1685382482,
    PT_ARM_EXIDX = 1879048192,
} Elf_ProgramHeaderType_ARM;

typedef enum {
    SHT_NULL = 0,
    SHT_PROGBITS = 1,
    SHT_SYMTAB = 2,
    SHT_STRTAB = 3,
    SHT_RELA = 4,
    SHT_HASH = 5,
    SHT_DYNAMIC = 6,
    SHT_NOTE = 7,
    SHT_NOBITS = 8,
    SHT_REL = 9,
    SHT_SHLIB = 10,
    SHT_DYNSYM = 11,
    SHT_INIT_ARRAY = 14,
    SHT_FINI_ARRAY = 15,
    SHT_PREINIT_ARRAY = 16,
    SHT_GROUP = 17,
    SHT_SYMTAB_SHNDX = 18,
    SHT_ANDROID_REL = 1610612737,
    SHT_ANDROID_RELA = 1610612738,
    SHT_GNU_ATTRIBUTES = 1879048181,
    SHT_GNU_HASH = 1879048182,
    SHT_GNU_LIBLIST = 1879048183,
    SHT_CHECKSUM = 1879048184,
    SHT_SUNW_move = 1879048186,
    SHT_SUNW_COMDAT = 1879048187,
    SHT_SUNW_syminfo = 1879048188,
    SHT_GNU_verdef = 1879048189,
    SHT_GNU_verneed = 1879048190,
    SHT_GNU_versym = 1879048191,
    SHT_ARM_EXIDX = 1879048193,
    SHT_ARM_PREEMPTMAP = 1879048194,
    SHT_ARM_ATTRIBUTES = 1879048195,
    SHT_ARM_DEBUGOVERLAY = 1879048196,
    SHT_ARM_OVERLAYSECTION = 1879048197,
} Elf_SectionHeaderType_ARM;

/* ==================== Forward Declarations ==================== */

typedef struct Elf32_Dyn_ARM Elf32_Dyn_ARM;
typedef struct Elf32_Ehdr Elf32_Ehdr;
typedef struct Elf32_Phdr Elf32_Phdr;
typedef struct Elf32_Rel Elf32_Rel;
typedef struct Elf32_Shdr Elf32_Shdr;
typedef struct Elf32_Sym Elf32_Sym;
typedef struct GnuBuildId GnuBuildId;
typedef struct NoteAbiTag NoteAbiTag;
typedef struct _IO_FILE _IO_FILE;
typedef struct _IO_marker _IO_marker;
typedef struct __pthread_internal_slist __pthread_internal_slist;
typedef struct __pthread_mutex_s __pthread_mutex_s;
typedef struct __pthread_unwind_buf_t __pthread_unwind_buf_t;
typedef struct _struct_1439 _struct_1439;
typedef struct _struct_16 _struct_16;
typedef struct addrinfo addrinfo;
typedef struct evp_pkey_ctx_st evp_pkey_ctx_st;
typedef struct fd_set fd_set;
typedef struct hostent hostent;
typedef struct lconv lconv;
typedef struct sockaddr sockaddr;
typedef struct sysinfo sysinfo;
typedef struct termios termios;
typedef struct timespec timespec;
typedef struct timeval timeval;
typedef struct timezone timezone;

/* ==================== Structures ==================== */

struct Elf32_Dyn_ARM {
    Elf32_DynTag_ARM d_tag;  // offset: 0x0
    dword d_val;  // offset: 0x4
}; // size: 0x8

struct Elf32_Ehdr {
    byte e_ident_magic_num;  // offset: 0x0
    string e_ident_magic_str;  // offset: 0x1
    byte e_ident_class;  // offset: 0x4
    byte e_ident_data;  // offset: 0x5
    byte e_ident_version;  // offset: 0x6
    byte e_ident_osabi;  // offset: 0x7
    byte e_ident_abiversion;  // offset: 0x8
    byte e_ident_pad[7];  // offset: 0x9
    word e_type;  // offset: 0x10
    word e_machine;  // offset: 0x12
    dword e_version;  // offset: 0x14
    dword e_entry;  // offset: 0x18
    dword e_phoff;  // offset: 0x1c
    dword e_shoff;  // offset: 0x20
    dword e_flags;  // offset: 0x24
    word e_ehsize;  // offset: 0x28
    word e_phentsize;  // offset: 0x2a
    word e_phnum;  // offset: 0x2c
    word e_shentsize;  // offset: 0x2e
    word e_shnum;  // offset: 0x30
    word e_shstrndx;  // offset: 0x32
}; // size: 0x34

struct Elf32_Phdr {
    Elf_ProgramHeaderType_ARM p_type;  // offset: 0x0
    dword p_offset;  // offset: 0x4
    dword p_vaddr;  // offset: 0x8
    dword p_paddr;  // offset: 0xc
    dword p_filesz;  // offset: 0x10
    dword p_memsz;  // offset: 0x14
    dword p_flags;  // offset: 0x18
    dword p_align;  // offset: 0x1c
}; // size: 0x20

struct Elf32_Rel {
    dword r_offset;  // offset: 0x0
    dword r_info;  // offset: 0x4
}; // size: 0x8

struct Elf32_Shdr {
    dword sh_name;  // offset: 0x0
    Elf_SectionHeaderType_ARM sh_type;  // offset: 0x4
    dword sh_flags;  // offset: 0x8
    dword sh_addr;  // offset: 0xc
    dword sh_offset;  // offset: 0x10
    dword sh_size;  // offset: 0x14
    dword sh_link;  // offset: 0x18
    dword sh_info;  // offset: 0x1c
    dword sh_addralign;  // offset: 0x20
    dword sh_entsize;  // offset: 0x24
}; // size: 0x28

struct Elf32_Sym {
    dword st_name;  // offset: 0x0
    dword st_value;  // offset: 0x4
    dword st_size;  // offset: 0x8
    byte st_info;  // offset: 0xc
    byte st_other;  // offset: 0xd
    word st_shndx;  // offset: 0xe
}; // size: 0x10

struct GnuBuildId {
    dword namesz;  // offset: 0x0
    dword descsz;  // offset: 0x4
    dword type;  // offset: 0x8
    string name;  // offset: 0xc
    byte hash[20];  // offset: 0x10
}; // size: 0x24

struct NoteAbiTag {
    dword namesz;  // offset: 0x0
    dword descsz;  // offset: 0x4
    dword type;  // offset: 0x8
    string name;  // offset: 0xc
    dword abiType;  // offset: 0x10
    dword requiredKernelVersion[3];  // offset: 0x14
}; // size: 0x20

struct _IO_FILE {
    int _flags;  // offset: 0x0
    char * _IO_read_ptr;  // offset: 0x4
    char * _IO_read_end;  // offset: 0x8
    char * _IO_read_base;  // offset: 0xc
    char * _IO_write_base;  // offset: 0x10
    char * _IO_write_ptr;  // offset: 0x14
    char * _IO_write_end;  // offset: 0x18
    char * _IO_buf_base;  // offset: 0x1c
    char * _IO_buf_end;  // offset: 0x20
    char * _IO_save_base;  // offset: 0x24
    char * _IO_backup_base;  // offset: 0x28
    char * _IO_save_end;  // offset: 0x2c
    _IO_marker * _markers;  // offset: 0x30
    _IO_FILE * _chain;  // offset: 0x34
    int _fileno;  // offset: 0x38
    int _flags2;  // offset: 0x3c
    __off_t _old_offset;  // offset: 0x40
    ushort _cur_column;  // offset: 0x44
    char _vtable_offset;  // offset: 0x46
    char _shortbuf[1];  // offset: 0x47
    _IO_lock_t * _lock;  // offset: 0x48
    __off64_t _offset;  // offset: 0x50
    void * __pad1;  // offset: 0x58
    void * __pad2;  // offset: 0x5c
    void * __pad3;  // offset: 0x60
    void * __pad4;  // offset: 0x64
    size_t __pad5;  // offset: 0x68
    int _mode;  // offset: 0x6c
    char _unused2[40];  // offset: 0x70
}; // size: 0x98

struct _IO_marker {
    _IO_marker * _next;  // offset: 0x0
    _IO_FILE * _sbuf;  // offset: 0x4
    int _pos;  // offset: 0x8
}; // size: 0xc

struct __pthread_internal_slist {
    __pthread_internal_slist * __next;  // offset: 0x0
}; // size: 0x4

struct __pthread_mutex_s {
    int __lock;  // offset: 0x0
    uint __count;  // offset: 0x4
    int __owner;  // offset: 0x8
    int __kind;  // offset: 0xc
    uint __nusers;  // offset: 0x10
    _union_13 field_20;  // offset: 0x14
}; // size: 0x18

struct __pthread_unwind_buf_t {
    _struct_1439 __cancel_jmp_buf[1];  // offset: 0x0
    void * __pad[4];  // offset: 0x1c
}; // size: 0x2c

struct _struct_1439 {
    __jmp_buf __cancel_jmp_buf;  // offset: 0x0
    int __mask_was_saved;  // offset: 0x18
}; // size: 0x1c

struct _struct_16 {
    int __lock;  // offset: 0x0
    uint __futex;  // offset: 0x4
    ulonglong __total_seq;  // offset: 0x8
    ulonglong __wakeup_seq;  // offset: 0x10
    ulonglong __woken_seq;  // offset: 0x18
    void * __mutex;  // offset: 0x20
    uint __nwaiters;  // offset: 0x24
    uint __broadcast_seq;  // offset: 0x28
}; // size: 0x30

struct addrinfo {
    int ai_flags;  // offset: 0x0
    int ai_family;  // offset: 0x4
    int ai_socktype;  // offset: 0x8
    int ai_protocol;  // offset: 0xc
    socklen_t ai_addrlen;  // offset: 0x10
    sockaddr * ai_addr;  // offset: 0x14
    char * ai_canonname;  // offset: 0x18
    addrinfo * ai_next;  // offset: 0x1c
}; // size: 0x20

struct evp_pkey_ctx_st {
    // Empty structure
}; // size: 0x1

struct fd_set {
    __fd_mask fds_bits[32];  // offset: 0x0
}; // size: 0x80

struct hostent {
    char * h_name;  // offset: 0x0
    char * * h_aliases;  // offset: 0x4
    int h_addrtype;  // offset: 0x8
    int h_length;  // offset: 0xc
    char * * h_addr_list;  // offset: 0x10
}; // size: 0x14

struct lconv {
    char * decimal_point;  // offset: 0x0
    char * thousands_sep;  // offset: 0x4
    char * grouping;  // offset: 0x8
    char * int_curr_symbol;  // offset: 0xc
    char * currency_symbol;  // offset: 0x10
    char * mon_decimal_point;  // offset: 0x14
    char * mon_thousands_sep;  // offset: 0x18
    char * mon_grouping;  // offset: 0x1c
    char * positive_sign;  // offset: 0x20
    char * negative_sign;  // offset: 0x24
    char int_frac_digits;  // offset: 0x28
    char frac_digits;  // offset: 0x29
    char p_cs_precedes;  // offset: 0x2a
    char p_sep_by_space;  // offset: 0x2b
    char n_cs_precedes;  // offset: 0x2c
    char n_sep_by_space;  // offset: 0x2d
    char p_sign_posn;  // offset: 0x2e
    char n_sign_posn;  // offset: 0x2f
    char int_p_cs_precedes;  // offset: 0x30
    char int_p_sep_by_space;  // offset: 0x31
    char int_n_cs_precedes;  // offset: 0x32
    char int_n_sep_by_space;  // offset: 0x33
    char int_p_sign_posn;  // offset: 0x34
    char int_n_sign_posn;  // offset: 0x35
}; // size: 0x38

struct sockaddr {
    sa_family_t sa_family;  // offset: 0x0
    char sa_data[14];  // offset: 0x2
}; // size: 0x10

struct sysinfo {
    long uptime;  // offset: 0x0
    ulong loads[3];  // offset: 0x4
    ulong totalram;  // offset: 0x10
    ulong freeram;  // offset: 0x14
    ulong sharedram;  // offset: 0x18
    ulong bufferram;  // offset: 0x1c
    ulong totalswap;  // offset: 0x20
    ulong freeswap;  // offset: 0x24
    ushort procs;  // offset: 0x28
    ushort pad;  // offset: 0x2a
    ulong totalhigh;  // offset: 0x2c
    ulong freehigh;  // offset: 0x30
    uint mem_unit;  // offset: 0x34
    char _f[8];  // offset: 0x38
}; // size: 0x40

struct termios {
    tcflag_t c_iflag;  // offset: 0x0
    tcflag_t c_oflag;  // offset: 0x4
    tcflag_t c_cflag;  // offset: 0x8
    tcflag_t c_lflag;  // offset: 0xc
    cc_t c_line;  // offset: 0x10
    cc_t c_cc[32];  // offset: 0x11
    speed_t c_ispeed;  // offset: 0x34
    speed_t c_ospeed;  // offset: 0x38
}; // size: 0x3c

struct timespec {
    __time_t tv_sec;  // offset: 0x0
    long tv_nsec;  // offset: 0x4
}; // size: 0x8

struct timeval {
    __time_t tv_sec;  // offset: 0x0
    __suseconds_t tv_usec;  // offset: 0x4
}; // size: 0x8

struct timezone {
    int tz_minuteswest;  // offset: 0x0
    int tz_dsttime;  // offset: 0x4
}; // size: 0x8

/* ==================== Unions ==================== */

union _union_13 {
    int __spins;
    __pthread_slist_t __list;
}; // size: 0x4

union pthread_attr_t {
    char[36] __size;
    long __align;
}; // size: 0x24

union pthread_cond_t {
    _struct_16 __data;
    char[48] __size;
    longlong __align;
}; // size: 0x30

union pthread_condattr_t {
    char[4] __size;
    int __align;
}; // size: 0x4

union pthread_mutex_t {
    __pthread_mutex_s __data;
    char[24] __size;
    long __align;
}; // size: 0x18

union pthread_mutexattr_t {
    char[4] __size;
    int __align;
}; // size: 0x4

/* ==================== Type Definitions ==================== */

typedef evp_pkey_ctx_st EVP_PKEY_CTX;
typedef _IO_FILE FILE;
typedef void _IO_lock_t;
typedef int __clockid_t;
typedef __compar_fn_t * __compar_fn_t;
typedef long __fd_mask;
typedef void * __gnuc_va_list;
typedef int __int32_t;
typedef int[6] __jmp_buf;
typedef __quad_t __off64_t;
typedef long __off_t;
typedef int __pid_t;
typedef __pthread_internal_slist __pthread_slist_t;
typedef longlong __quad_t;
typedef __sighandler_t * __sighandler_t;
typedef uint __socklen_t;
typedef int __ssize_t;
typedef long __suseconds_t;
typedef long __time_t;
typedef timezone * __timezone_ptr_t;
typedef uint __useconds_t;
typedef uchar cc_t;
typedef __clockid_t clockid_t;
typedef uint32_t in_addr_t;
typedef ulong pthread_t;
typedef ushort sa_family_t;
typedef ulong size_t;
typedef __socklen_t socklen_t;
typedef uint speed_t;
typedef __ssize_t ssize_t;
typedef uint tcflag_t;
typedef __time_t time_t;
typedef uint uint32_t;

/* ==================== Function Prototypes ==================== */

int __compar_fn_t(void * param0, void * param1);
void __sighandler_t(int param0);
void * __start_routine(void * param0);

#endif // GODMINER_D1C977AD2403AAA2_TYPES_H
