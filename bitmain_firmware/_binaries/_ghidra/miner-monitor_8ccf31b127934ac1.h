// Data types exported from: miner-monitor_8ccf31b127934ac1
// Generated by Ghidra

#ifndef MINER_MONITOR_8CCF31B127934AC1_TYPES_H
#define MINER_MONITOR_8CCF31B127934AC1_TYPES_H

#include <stdint.h>
#include <stdbool.h>

/* ==================== Enumerations ==================== */

typedef enum {
    DT_NULL = 0,
    DT_NEEDED = 1,
    DT_PLTRELSZ = 2,
    DT_PLTGOT = 3,
    DT_HASH = 4,
    DT_STRTAB = 5,
    DT_SYMTAB = 6,
    DT_RELA = 7,
    DT_RELASZ = 8,
    DT_RELAENT = 9,
    DT_STRSZ = 10,
    DT_SYMENT = 11,
    DT_INIT = 12,
    DT_FINI = 13,
    DT_SONAME = 14,
    DT_RPATH = 15,
    DT_SYMBOLIC = 16,
    DT_REL = 17,
    DT_RELSZ = 18,
    DT_RELENT = 19,
    DT_PLTREL = 20,
    DT_DEBUG = 21,
    DT_TEXTREL = 22,
    DT_JMPREL = 23,
    DT_BIND_NOW = 24,
    DT_INIT_ARRAY = 25,
    DT_FINI_ARRAY = 26,
    DT_INIT_ARRAYSZ = 27,
    DT_FINI_ARRAYSZ = 28,
    DT_RUNPATH = 29,
    DT_FLAGS = 30,
    DT_PREINIT_ARRAY = 32,
    DT_PREINIT_ARRAYSZ = 33,
    DT_RELRSZ = 35,
    DT_RELR = 36,
    DT_RELRENT = 37,
    DT_ANDROID_REL = 1610612751,
    DT_ANDROID_RELSZ = 1610612752,
    DT_ANDROID_RELA = 1610612753,
    DT_ANDROID_RELASZ = 1610612754,
    DT_ANDROID_RELR = 1879040000,
    DT_ANDROID_RELRSZ = 1879040001,
    DT_ANDROID_RELRENT = 1879040003,
    DT_GNU_PRELINKED = 1879047669,
    DT_GNU_CONFLICTSZ = 1879047670,
    DT_GNU_LIBLISTSZ = 1879047671,
    DT_CHECKSUM = 1879047672,
    DT_PLTPADSZ = 1879047673,
    DT_MOVEENT = 1879047674,
    DT_MOVESZ = 1879047675,
    DT_FEATURE_1 = 1879047676,
    DT_POSFLAG_1 = 1879047677,
    DT_SYMINSZ = 1879047678,
    DT_SYMINENT = 1879047679,
    DT_GNU_XHASH = 1879047924,
    DT_GNU_HASH = 1879047925,
    DT_TLSDESC_PLT = 1879047926,
    DT_TLSDESC_GOT = 1879047927,
    DT_GNU_CONFLICT = 1879047928,
    DT_GNU_LIBLIST = 1879047929,
    DT_CONFIG = 1879047930,
    DT_DEPAUDIT = 1879047931,
    DT_AUDIT = 1879047932,
    DT_PLTPAD = 1879047933,
    DT_MOVETAB = 1879047934,
    DT_SYMINFO = 1879047935,
    DT_VERSYM = 1879048176,
    DT_RELACOUNT = 1879048185,
    DT_RELCOUNT = 1879048186,
    DT_FLAGS_1 = 1879048187,
    DT_VERDEF = 1879048188,
    DT_VERDEFNUM = 1879048189,
    DT_VERNEED = 1879048190,
    DT_VERNEEDNUM = 1879048191,
    DT_AUXILIARY = 2147483645,
    DT_FILTER = 2147483647,
} Elf32_DynTag_ARM;

typedef enum {
    PT_NULL = 0,
    PT_LOAD = 1,
    PT_DYNAMIC = 2,
    PT_INTERP = 3,
    PT_NOTE = 4,
    PT_SHLIB = 5,
    PT_PHDR = 6,
    PT_TLS = 7,
    PT_GNU_EH_FRAME = 1685382480,
    PT_GNU_STACK = 1685382481,
    PT_GNU_RELRO = 1685382482,
    PT_ARM_EXIDX = 1879048192,
} Elf_ProgramHeaderType_ARM;

typedef enum {
    SHT_NULL = 0,
    SHT_PROGBITS = 1,
    SHT_SYMTAB = 2,
    SHT_STRTAB = 3,
    SHT_RELA = 4,
    SHT_HASH = 5,
    SHT_DYNAMIC = 6,
    SHT_NOTE = 7,
    SHT_NOBITS = 8,
    SHT_REL = 9,
    SHT_SHLIB = 10,
    SHT_DYNSYM = 11,
    SHT_INIT_ARRAY = 14,
    SHT_FINI_ARRAY = 15,
    SHT_PREINIT_ARRAY = 16,
    SHT_GROUP = 17,
    SHT_SYMTAB_SHNDX = 18,
    SHT_ANDROID_REL = 1610612737,
    SHT_ANDROID_RELA = 1610612738,
    SHT_GNU_ATTRIBUTES = 1879048181,
    SHT_GNU_HASH = 1879048182,
    SHT_GNU_LIBLIST = 1879048183,
    SHT_CHECKSUM = 1879048184,
    SHT_SUNW_move = 1879048186,
    SHT_SUNW_COMDAT = 1879048187,
    SHT_SUNW_syminfo = 1879048188,
    SHT_GNU_verdef = 1879048189,
    SHT_GNU_verneed = 1879048190,
    SHT_GNU_versym = 1879048191,
    SHT_ARM_EXIDX = 1879048193,
    SHT_ARM_PREEMPTMAP = 1879048194,
    SHT_ARM_ATTRIBUTES = 1879048195,
    SHT_ARM_DEBUGOVERLAY = 1879048196,
    SHT_ARM_OVERLAYSECTION = 1879048197,
} Elf_SectionHeaderType_ARM;

typedef enum {
    ITIMER_REAL = 0,
    ITIMER_VIRTUAL = 1,
    ITIMER_PROF = 2,
} __itimer_which;

/* ==================== Forward Declarations ==================== */

typedef struct ASIdentifierChoice_st ASIdentifierChoice_st;
typedef struct ASIdentifiers_st ASIdentifiers_st;
typedef struct ASN1_ENCODING_st ASN1_ENCODING_st;
typedef struct ASN1_VALUE_st ASN1_VALUE_st;
typedef struct AUTHORITY_KEYID_st AUTHORITY_KEYID_st;
typedef struct DIST_POINT_NAME_st DIST_POINT_NAME_st;
typedef struct DSA_SIG_st DSA_SIG_st;
typedef struct Elf32_Dyn_ARM Elf32_Dyn_ARM;
typedef struct Elf32_Ehdr Elf32_Ehdr;
typedef struct Elf32_Phdr Elf32_Phdr;
typedef struct Elf32_Rel Elf32_Rel;
typedef struct Elf32_Shdr Elf32_Shdr;
typedef struct Elf32_Sym Elf32_Sym;
typedef struct GnuBuildId GnuBuildId;
typedef struct GnuDebugLink_16 GnuDebugLink_16;
typedef struct ISSUING_DIST_POINT_st ISSUING_DIST_POINT_st;
typedef struct NAME_CONSTRAINTS_st NAME_CONSTRAINTS_st;
typedef struct NoteAbiTag NoteAbiTag;
typedef struct X509_POLICY_CACHE_st X509_POLICY_CACHE_st;
typedef struct X509_POLICY_TREE_st X509_POLICY_TREE_st;
typedef struct X509_VERIFY_PARAM_st X509_VERIFY_PARAM_st;
typedef struct X509_algor_st X509_algor_st;
typedef struct X509_crl_info_st X509_crl_info_st;
typedef struct X509_crl_st X509_crl_st;
typedef struct X509_name_st X509_name_st;
typedef struct X509_pubkey_st X509_pubkey_st;
typedef struct X509_val_st X509_val_st;
typedef struct _IO_FILE _IO_FILE;
typedef struct _IO_marker _IO_marker;
typedef struct __sigset_t __sigset_t;
typedef struct _pqueue _pqueue;
typedef struct _struct_621 _struct_621;
typedef struct _struct_647 _struct_647;
typedef struct _struct_651 _struct_651;
typedef struct asn1_object_st asn1_object_st;
typedef struct asn1_string_st asn1_string_st;
typedef struct asn1_type_st asn1_type_st;
typedef struct bignum_ctx bignum_ctx;
typedef struct bignum_st bignum_st;
typedef struct bio_method_st bio_method_st;
typedef struct bio_st bio_st;
typedef struct bn_blinding_st bn_blinding_st;
typedef struct bn_gencb_st bn_gencb_st;
typedef struct bn_mont_ctx_st bn_mont_ctx_st;
typedef struct buf_mem_st buf_mem_st;
typedef struct cert_st cert_st;
typedef struct comp_ctx_st comp_ctx_st;
typedef struct comp_method_st comp_method_st;
typedef struct crypto_ex_data_st crypto_ex_data_st;
typedef struct dh_method dh_method;
typedef struct dh_st dh_st;
typedef struct dsa_method dsa_method;
typedef struct dsa_st dsa_st;
typedef struct dtls1_bitmap_st dtls1_bitmap_st;
typedef struct dtls1_retransmit_state dtls1_retransmit_state;
typedef struct dtls1_state_st dtls1_state_st;
typedef struct dtls1_timeout_st dtls1_timeout_st;
typedef struct ec_key_st ec_key_st;
typedef struct engine_st engine_st;
typedef struct env_md_ctx_st env_md_ctx_st;
typedef struct env_md_st env_md_st;
typedef struct evp_cipher_ctx_st evp_cipher_ctx_st;
typedef struct evp_cipher_st evp_cipher_st;
typedef struct evp_pkey_asn1_method_st evp_pkey_asn1_method_st;
typedef struct evp_pkey_ctx_st evp_pkey_ctx_st;
typedef struct evp_pkey_st evp_pkey_st;
typedef struct hm_header_st hm_header_st;
typedef struct hmac_ctx_st hmac_ctx_st;
typedef struct hostent hostent;
typedef struct in_addr in_addr;
typedef struct itimerval itimerval;
typedef struct kssl_ctx_st kssl_ctx_st;
typedef struct lhash_st_SSL_SESSION lhash_st_SSL_SESSION;
typedef struct record_pqueue_st record_pqueue_st;
typedef struct rsa_meth_st rsa_meth_st;
typedef struct rsa_st rsa_st;
typedef struct sess_cert_st sess_cert_st;
typedef struct sockaddr sockaddr;
typedef struct srtp_protection_profile_st srtp_protection_profile_st;
typedef struct ssl2_state_st ssl2_state_st;
typedef struct ssl3_buf_freelist_st ssl3_buf_freelist_st;
typedef struct ssl3_buffer_st ssl3_buffer_st;
typedef struct ssl3_enc_method ssl3_enc_method;
typedef struct ssl3_record_st ssl3_record_st;
typedef struct ssl3_state_st ssl3_state_st;
typedef struct ssl_cipher_st ssl_cipher_st;
typedef struct ssl_comp_st ssl_comp_st;
typedef struct ssl_ctx_st ssl_ctx_st;
typedef struct ssl_method_st ssl_method_st;
typedef struct ssl_session_st ssl_session_st;
typedef struct ssl_st ssl_st;
typedef struct stack_st stack_st;
typedef struct stack_st_ASIdOrRange stack_st_ASIdOrRange;
typedef struct stack_st_ASN1_OBJECT stack_st_ASN1_OBJECT;
typedef struct stack_st_DIST_POINT stack_st_DIST_POINT;
typedef struct stack_st_GENERAL_NAME stack_st_GENERAL_NAME;
typedef struct stack_st_GENERAL_NAMES stack_st_GENERAL_NAMES;
typedef struct stack_st_GENERAL_SUBTREE stack_st_GENERAL_SUBTREE;
typedef struct stack_st_IPAddressFamily stack_st_IPAddressFamily;
typedef struct stack_st_OCSP_RESPID stack_st_OCSP_RESPID;
typedef struct stack_st_SRTP_PROTECTION_PROFILE stack_st_SRTP_PROTECTION_PROFILE;
typedef struct stack_st_SSL_CIPHER stack_st_SSL_CIPHER;
typedef struct stack_st_SSL_COMP stack_st_SSL_COMP;
typedef struct stack_st_X509 stack_st_X509;
typedef struct stack_st_X509_ALGOR stack_st_X509_ALGOR;
typedef struct stack_st_X509_ATTRIBUTE stack_st_X509_ATTRIBUTE;
typedef struct stack_st_X509_CRL stack_st_X509_CRL;
typedef struct stack_st_X509_EXTENSION stack_st_X509_EXTENSION;
typedef struct stack_st_X509_LOOKUP stack_st_X509_LOOKUP;
typedef struct stack_st_X509_NAME stack_st_X509_NAME;
typedef struct stack_st_X509_NAME_ENTRY stack_st_X509_NAME_ENTRY;
typedef struct stack_st_X509_OBJECT stack_st_X509_OBJECT;
typedef struct stack_st_X509_REVOKED stack_st_X509_REVOKED;
typedef struct stack_st_void stack_st_void;
typedef struct timeval timeval;
typedef struct timezone timezone;
typedef struct tls_session_ticket_ext_st tls_session_ticket_ext_st;
typedef struct x509_cert_aux_st x509_cert_aux_st;
typedef struct x509_cinf_st x509_cinf_st;
typedef struct x509_crl_method_st x509_crl_method_st;
typedef struct x509_st x509_st;
typedef struct x509_store_ctx_st x509_store_ctx_st;
typedef struct x509_store_st x509_store_st;

/* ==================== Structures ==================== */

struct ASIdentifierChoice_st {
    int type;  // offset: 0x0
    _union_933 u;  // offset: 0x4
}; // size: 0x8

struct ASIdentifiers_st {
    ASIdentifierChoice * asnum;  // offset: 0x0
    ASIdentifierChoice * * rdi;  // offset: 0x4
}; // size: 0x8

struct ASN1_ENCODING_st {
    uchar * enc;  // offset: 0x0
    long len;  // offset: 0x4
    int modified;  // offset: 0x8
}; // size: 0xc

struct ASN1_VALUE_st {
    // Empty structure
}; // size: 0x1

struct AUTHORITY_KEYID_st {
    ASN1_OCTET_STRING * keyid;  // offset: 0x0
    GENERAL_NAMES * issuer;  // offset: 0x4
    ASN1_INTEGER * serial;  // offset: 0x8
}; // size: 0xc

struct DIST_POINT_NAME_st {
    int type;  // offset: 0x0
    _union_859 name;  // offset: 0x4
    X509_NAME * dpname;  // offset: 0x8
}; // size: 0xc

struct DSA_SIG_st {
    BIGNUM * r;  // offset: 0x0
    BIGNUM * s;  // offset: 0x4
}; // size: 0x8

struct Elf32_Dyn_ARM {
    Elf32_DynTag_ARM d_tag;  // offset: 0x0
    dword d_val;  // offset: 0x4
}; // size: 0x8

struct Elf32_Ehdr {
    byte e_ident_magic_num;  // offset: 0x0
    string e_ident_magic_str;  // offset: 0x1
    byte e_ident_class;  // offset: 0x4
    byte e_ident_data;  // offset: 0x5
    byte e_ident_version;  // offset: 0x6
    byte e_ident_osabi;  // offset: 0x7
    byte e_ident_abiversion;  // offset: 0x8
    byte e_ident_pad[7];  // offset: 0x9
    word e_type;  // offset: 0x10
    word e_machine;  // offset: 0x12
    dword e_version;  // offset: 0x14
    dword e_entry;  // offset: 0x18
    dword e_phoff;  // offset: 0x1c
    dword e_shoff;  // offset: 0x20
    dword e_flags;  // offset: 0x24
    word e_ehsize;  // offset: 0x28
    word e_phentsize;  // offset: 0x2a
    word e_phnum;  // offset: 0x2c
    word e_shentsize;  // offset: 0x2e
    word e_shnum;  // offset: 0x30
    word e_shstrndx;  // offset: 0x32
}; // size: 0x34

struct Elf32_Phdr {
    Elf_ProgramHeaderType_ARM p_type;  // offset: 0x0
    dword p_offset;  // offset: 0x4
    dword p_vaddr;  // offset: 0x8
    dword p_paddr;  // offset: 0xc
    dword p_filesz;  // offset: 0x10
    dword p_memsz;  // offset: 0x14
    dword p_flags;  // offset: 0x18
    dword p_align;  // offset: 0x1c
}; // size: 0x20

struct Elf32_Rel {
    dword r_offset;  // offset: 0x0
    dword r_info;  // offset: 0x4
}; // size: 0x8

struct Elf32_Shdr {
    dword sh_name;  // offset: 0x0
    Elf_SectionHeaderType_ARM sh_type;  // offset: 0x4
    dword sh_flags;  // offset: 0x8
    dword sh_addr;  // offset: 0xc
    dword sh_offset;  // offset: 0x10
    dword sh_size;  // offset: 0x14
    dword sh_link;  // offset: 0x18
    dword sh_info;  // offset: 0x1c
    dword sh_addralign;  // offset: 0x20
    dword sh_entsize;  // offset: 0x24
}; // size: 0x28

struct Elf32_Sym {
    dword st_name;  // offset: 0x0
    dword st_value;  // offset: 0x4
    dword st_size;  // offset: 0x8
    byte st_info;  // offset: 0xc
    byte st_other;  // offset: 0xd
    word st_shndx;  // offset: 0xe
}; // size: 0x10

struct GnuBuildId {
    dword namesz;  // offset: 0x0
    dword descsz;  // offset: 0x4
    dword type;  // offset: 0x8
    string name;  // offset: 0xc
    byte hash[20];  // offset: 0x10
}; // size: 0x24

struct GnuDebugLink_16 {
    string filename;  // offset: 0x0
    dword crc;  // offset: 0x10
}; // size: 0x14

struct ISSUING_DIST_POINT_st {
    DIST_POINT_NAME * distpoint;  // offset: 0x0
    int onlyuser;  // offset: 0x4
    int onlyCA;  // offset: 0x8
    ASN1_BIT_STRING * onlysomereasons;  // offset: 0xc
    int indirectCRL;  // offset: 0x10
    int onlyattr;  // offset: 0x14
}; // size: 0x18

struct NAME_CONSTRAINTS_st {
    stack_st_GENERAL_SUBTREE * permittedSubtrees;  // offset: 0x0
    stack_st_GENERAL_SUBTREE * excludedSubtrees;  // offset: 0x4
}; // size: 0x8

struct NoteAbiTag {
    dword namesz;  // offset: 0x0
    dword descsz;  // offset: 0x4
    dword type;  // offset: 0x8
    string name;  // offset: 0xc
    dword abiType;  // offset: 0x10
    dword requiredKernelVersion[3];  // offset: 0x14
}; // size: 0x20

struct X509_POLICY_CACHE_st {
    // Empty structure
}; // size: 0x1

struct X509_POLICY_TREE_st {
    // Empty structure
}; // size: 0x1

struct X509_VERIFY_PARAM_st {
    char * name;  // offset: 0x0
    time_t check_time;  // offset: 0x4
    ulong inh_flags;  // offset: 0x8
    ulong flags;  // offset: 0xc
    int purpose;  // offset: 0x10
    int trust;  // offset: 0x14
    int depth;  // offset: 0x18
    stack_st_ASN1_OBJECT * policies;  // offset: 0x1c
}; // size: 0x20

struct X509_algor_st {
    ASN1_OBJECT * algorithm;  // offset: 0x0
    ASN1_TYPE * parameter;  // offset: 0x4
}; // size: 0x8

struct X509_crl_info_st {
    ASN1_INTEGER * version;  // offset: 0x0
    X509_ALGOR * sig_alg;  // offset: 0x4
    X509_NAME * issuer;  // offset: 0x8
    ASN1_TIME * lastUpdate;  // offset: 0xc
    ASN1_TIME * nextUpdate;  // offset: 0x10
    stack_st_X509_REVOKED * revoked;  // offset: 0x14
    stack_st_X509_EXTENSION * extensions;  // offset: 0x18
    ASN1_ENCODING enc;  // offset: 0x1c
}; // size: 0x28

struct X509_crl_st {
    X509_CRL_INFO * crl;  // offset: 0x0
    X509_ALGOR * sig_alg;  // offset: 0x4
    ASN1_BIT_STRING * signature;  // offset: 0x8
    int references;  // offset: 0xc
    int flags;  // offset: 0x10
    AUTHORITY_KEYID * akid;  // offset: 0x14
    ISSUING_DIST_POINT * idp;  // offset: 0x18
    int idp_flags;  // offset: 0x1c
    int idp_reasons;  // offset: 0x20
    ASN1_INTEGER * crl_number;  // offset: 0x24
    ASN1_INTEGER * base_crl_number;  // offset: 0x28
    uchar sha1_hash[20];  // offset: 0x2c
    stack_st_GENERAL_NAMES * issuers;  // offset: 0x40
    X509_CRL_METHOD * meth;  // offset: 0x44
    void * meth_data;  // offset: 0x48
}; // size: 0x4c

struct X509_name_st {
    stack_st_X509_NAME_ENTRY * entries;  // offset: 0x0
    int modified;  // offset: 0x4
    BUF_MEM * bytes;  // offset: 0x8
    uchar * canon_enc;  // offset: 0xc
    int canon_enclen;  // offset: 0x10
}; // size: 0x14

struct X509_pubkey_st {
    X509_ALGOR * algor;  // offset: 0x0
    ASN1_BIT_STRING * public_key;  // offset: 0x4
    EVP_PKEY * pkey;  // offset: 0x8
}; // size: 0xc

struct X509_val_st {
    ASN1_TIME * notBefore;  // offset: 0x0
    ASN1_TIME * notAfter;  // offset: 0x4
}; // size: 0x8

struct _IO_FILE {
    int _flags;  // offset: 0x0
    char * _IO_read_ptr;  // offset: 0x4
    char * _IO_read_end;  // offset: 0x8
    char * _IO_read_base;  // offset: 0xc
    char * _IO_write_base;  // offset: 0x10
    char * _IO_write_ptr;  // offset: 0x14
    char * _IO_write_end;  // offset: 0x18
    char * _IO_buf_base;  // offset: 0x1c
    char * _IO_buf_end;  // offset: 0x20
    char * _IO_save_base;  // offset: 0x24
    char * _IO_backup_base;  // offset: 0x28
    char * _IO_save_end;  // offset: 0x2c
    _IO_marker * _markers;  // offset: 0x30
    _IO_FILE * _chain;  // offset: 0x34
    int _fileno;  // offset: 0x38
    int _flags2;  // offset: 0x3c
    __off_t _old_offset;  // offset: 0x40
    ushort _cur_column;  // offset: 0x44
    char _vtable_offset;  // offset: 0x46
    char _shortbuf[1];  // offset: 0x47
    _IO_lock_t * _lock;  // offset: 0x48
    __off64_t _offset;  // offset: 0x50
    void * __pad1;  // offset: 0x58
    void * __pad2;  // offset: 0x5c
    void * __pad3;  // offset: 0x60
    void * __pad4;  // offset: 0x64
    size_t __pad5;  // offset: 0x68
    int _mode;  // offset: 0x6c
    char _unused2[40];  // offset: 0x70
}; // size: 0x98

struct _IO_marker {
    _IO_marker * _next;  // offset: 0x0
    _IO_FILE * _sbuf;  // offset: 0x4
    int _pos;  // offset: 0x8
}; // size: 0xc

struct __sigset_t {
    ulong __val[32];  // offset: 0x0
}; // size: 0x80

struct _pqueue {
    // Empty structure
}; // size: 0x1

struct _struct_621 {
    int sess_connect;  // offset: 0x0
    int sess_connect_renegotiate;  // offset: 0x4
    int sess_connect_good;  // offset: 0x8
    int sess_accept;  // offset: 0xc
    int sess_accept_renegotiate;  // offset: 0x10
    int sess_accept_good;  // offset: 0x14
    int sess_miss;  // offset: 0x18
    int sess_timeout;  // offset: 0x1c
    int sess_cache_full;  // offset: 0x20
    int sess_hit;  // offset: 0x24
    int sess_cb_hit;  // offset: 0x28
}; // size: 0x2c

struct _struct_647 {
    uint conn_id_length;  // offset: 0x0
    uint cert_type;  // offset: 0x4
    uint cert_length;  // offset: 0x8
    uint csl;  // offset: 0xc
    uint clear;  // offset: 0x10
    uint enc;  // offset: 0x14
    uchar ccl[32];  // offset: 0x18
    uint cipher_spec_length;  // offset: 0x38
    uint session_id_length;  // offset: 0x3c
    uint clen;  // offset: 0x40
    uint rlen;  // offset: 0x44
}; // size: 0x48

struct _struct_651 {
    uchar cert_verify_md[128];  // offset: 0x0
    uchar finish_md[128];  // offset: 0x80
    int finish_md_len;  // offset: 0x100
    uchar peer_finish_md[128];  // offset: 0x104
    int peer_finish_md_len;  // offset: 0x184
    ulong message_size;  // offset: 0x188
    int message_type;  // offset: 0x18c
    SSL_CIPHER * new_cipher;  // offset: 0x190
    DH * dh;  // offset: 0x194
    EC_KEY * ecdh;  // offset: 0x198
    int next_state;  // offset: 0x19c
    int reuse_message;  // offset: 0x1a0
    int cert_req;  // offset: 0x1a4
    int ctype_num;  // offset: 0x1a8
    char ctype[9];  // offset: 0x1ac
    stack_st_X509_NAME * ca_names;  // offset: 0x1b8
    int use_rsa_tmp;  // offset: 0x1bc
    int key_block_length;  // offset: 0x1c0
    uchar * key_block;  // offset: 0x1c4
    EVP_CIPHER * new_sym_enc;  // offset: 0x1c8
    EVP_MD * new_hash;  // offset: 0x1cc
    int new_mac_pkey_type;  // offset: 0x1d0
    int new_mac_secret_size;  // offset: 0x1d4
    SSL_COMP * new_compression;  // offset: 0x1d8
    int cert_request;  // offset: 0x1dc
}; // size: 0x1e0

struct asn1_object_st {
    char * sn;  // offset: 0x0
    char * * ln;  // offset: 0x4
    int nid;  // offset: 0x8
    int length;  // offset: 0xc
    uchar * data;  // offset: 0x10
    int flags;  // offset: 0x14
}; // size: 0x18

struct asn1_string_st {
    int length;  // offset: 0x0
    int type;  // offset: 0x4
    uchar * data;  // offset: 0x8
    long flags;  // offset: 0xc
}; // size: 0x10

struct asn1_type_st {
    int type;  // offset: 0x0
    _union_263 value;  // offset: 0x4
}; // size: 0x8

struct bignum_ctx {
    // Empty structure
}; // size: 0x1

struct bignum_st {
    ulong * d;  // offset: 0x0
    int top;  // offset: 0x4
    int dmax;  // offset: 0x8
    int neg;  // offset: 0xc
    int flags;  // offset: 0x10
}; // size: 0x14

struct bio_method_st {
    int type;  // offset: 0x0
    char * name;  // offset: 0x4
    _func_737 * bwrite;  // offset: 0x8
    _func_738 * bread;  // offset: 0xc
    _func_739 * bputs;  // offset: 0x10
    _func_740 * bgets;  // offset: 0x14
    _func_741 * ctrl;  // offset: 0x18
    _func_742 * create;  // offset: 0x1c
    _func_743 * destroy;  // offset: 0x20
    _func_744 * callback_ctrl;  // offset: 0x24
}; // size: 0x28

struct bio_st {
    BIO_METHOD * method;  // offset: 0x0
    _func_745 * callback;  // offset: 0x4
    char * cb_arg;  // offset: 0x8
    int init;  // offset: 0xc
    int shutdown;  // offset: 0x10
    int flags;  // offset: 0x14
    int retry_reason;  // offset: 0x18
    int num;  // offset: 0x1c
    void * ptr;  // offset: 0x20
    bio_st * next_bio;  // offset: 0x24
    bio_st * prev_bio;  // offset: 0x28
    int references;  // offset: 0x2c
    ulong num_read;  // offset: 0x30
    ulong num_write;  // offset: 0x34
    CRYPTO_EX_DATA ex_data;  // offset: 0x38
}; // size: 0x40

struct bn_blinding_st {
    // Empty structure
}; // size: 0x1

struct bn_gencb_st {
    uint ver;  // offset: 0x0
    void * arg;  // offset: 0x4
    _union_181 cb;  // offset: 0x8
}; // size: 0xc

struct bn_mont_ctx_st {
    int ri;  // offset: 0x0
    BIGNUM RR;  // offset: 0x4
    BIGNUM N;  // offset: 0x18
    BIGNUM Ni;  // offset: 0x2c
    ulong n0[2];  // offset: 0x40
    int flags;  // offset: 0x48
}; // size: 0x4c

struct buf_mem_st {
    size_t length;  // offset: 0x0
    char * data;  // offset: 0x4
    size_t max;  // offset: 0x8
}; // size: 0xc

struct cert_st {
    // Empty structure
}; // size: 0x1

struct comp_ctx_st {
    COMP_METHOD * meth;  // offset: 0x0
    ulong compress_in;  // offset: 0x4
    ulong compress_out;  // offset: 0x8
    ulong expand_in;  // offset: 0xc
    ulong expand_out;  // offset: 0x10
    CRYPTO_EX_DATA ex_data;  // offset: 0x14
}; // size: 0x1c

struct comp_method_st {
    int type;  // offset: 0x0
    char * name;  // offset: 0x4
    _func_711 * init;  // offset: 0x8
    _func_712 * finish;  // offset: 0xc
    _func_713 * compress;  // offset: 0x10
    _func_714 * expand;  // offset: 0x14
    _func_715 * ctrl;  // offset: 0x18
    _func_716 * callback_ctrl;  // offset: 0x1c
}; // size: 0x20

struct crypto_ex_data_st {
    stack_st_void * sk;  // offset: 0x0
    int dummy;  // offset: 0x4
}; // size: 0x8

struct dh_method {
    char * name;  // offset: 0x0
    _func_1843 * generate_key;  // offset: 0x4
    _func_1844 * compute_key;  // offset: 0x8
    _func_1845 * bn_mod_exp;  // offset: 0xc
    _func_1846 * init;  // offset: 0x10
    _func_1847 * finish;  // offset: 0x14
    int flags;  // offset: 0x18
    char * app_data;  // offset: 0x1c
    _func_1848 * generate_params;  // offset: 0x20
}; // size: 0x24

struct dh_st {
    int pad;  // offset: 0x0
    int version;  // offset: 0x4
    BIGNUM * p;  // offset: 0x8
    BIGNUM * g;  // offset: 0xc
    long length;  // offset: 0x10
    BIGNUM * pub_key;  // offset: 0x14
    BIGNUM * priv_key;  // offset: 0x18
    int flags;  // offset: 0x1c
    BN_MONT_CTX * method_mont_p;  // offset: 0x20
    BIGNUM * q;  // offset: 0x24
    BIGNUM * j;  // offset: 0x28
    uchar * seed;  // offset: 0x2c
    int seedlen;  // offset: 0x30
    BIGNUM * counter;  // offset: 0x34
    int references;  // offset: 0x38
    CRYPTO_EX_DATA ex_data;  // offset: 0x3c
    DH_METHOD * meth;  // offset: 0x44
    ENGINE * engine;  // offset: 0x48
}; // size: 0x4c

struct dsa_method {
    char * name;  // offset: 0x0
    _func_1875 * dsa_do_sign;  // offset: 0x4
    _func_1876 * dsa_sign_setup;  // offset: 0x8
    _func_1877 * dsa_do_verify;  // offset: 0xc
    _func_1878 * dsa_mod_exp;  // offset: 0x10
    _func_1879 * bn_mod_exp;  // offset: 0x14
    _func_1880 * init;  // offset: 0x18
    _func_1881 * finish;  // offset: 0x1c
    int flags;  // offset: 0x20
    char * app_data;  // offset: 0x24
    _func_1882 * dsa_paramgen;  // offset: 0x28
    _func_1883 * dsa_keygen;  // offset: 0x2c
}; // size: 0x30

struct dsa_st {
    int pad;  // offset: 0x0
    long version;  // offset: 0x4
    int write_params;  // offset: 0x8
    BIGNUM * p;  // offset: 0xc
    BIGNUM * q;  // offset: 0x10
    BIGNUM * g;  // offset: 0x14
    BIGNUM * pub_key;  // offset: 0x18
    BIGNUM * priv_key;  // offset: 0x1c
    BIGNUM * kinv;  // offset: 0x20
    BIGNUM * r;  // offset: 0x24
    int flags;  // offset: 0x28
    BN_MONT_CTX * method_mont_p;  // offset: 0x2c
    int references;  // offset: 0x30
    CRYPTO_EX_DATA ex_data;  // offset: 0x34
    DSA_METHOD * meth;  // offset: 0x3c
    ENGINE * engine;  // offset: 0x40
}; // size: 0x44

struct dtls1_bitmap_st {
    ulong map;  // offset: 0x0
    uchar max_seq_num[8];  // offset: 0x4
}; // size: 0xc

struct dtls1_retransmit_state {
    EVP_CIPHER_CTX * enc_write_ctx;  // offset: 0x0
    EVP_MD_CTX * write_hash;  // offset: 0x4
    COMP_CTX * compress;  // offset: 0x8
    SSL_SESSION * session;  // offset: 0xc
    ushort epoch;  // offset: 0x10
}; // size: 0x14

struct dtls1_state_st {
    uint send_cookie;  // offset: 0x0
    uchar cookie[256];  // offset: 0x4
    uchar rcvd_cookie[256];  // offset: 0x104
    uint cookie_len;  // offset: 0x204
    ushort r_epoch;  // offset: 0x208
    ushort w_epoch;  // offset: 0x20a
    DTLS1_BITMAP bitmap;  // offset: 0x20c
    DTLS1_BITMAP next_bitmap;  // offset: 0x218
    ushort handshake_write_seq;  // offset: 0x224
    ushort next_handshake_write_seq;  // offset: 0x226
    ushort handshake_read_seq;  // offset: 0x228
    uchar last_write_sequence[8];  // offset: 0x22a
    record_pqueue unprocessed_rcds;  // offset: 0x234
    record_pqueue processed_rcds;  // offset: 0x23c
    pqueue buffered_messages;  // offset: 0x244
    pqueue sent_messages;  // offset: 0x248
    record_pqueue buffered_app_data;  // offset: 0x24c
    uint mtu;  // offset: 0x254
    hm_header_st w_msg_hdr;  // offset: 0x258
    hm_header_st r_msg_hdr;  // offset: 0x284
    dtls1_timeout_st timeout;  // offset: 0x2b0
    timeval next_timeout;  // offset: 0x2bc
    ushort timeout_duration;  // offset: 0x2c4
    uchar alert_fragment[2];  // offset: 0x2c6
    uint alert_fragment_len;  // offset: 0x2c8
    uchar handshake_fragment[12];  // offset: 0x2cc
    uint handshake_fragment_len;  // offset: 0x2d8
    uint retransmitting;  // offset: 0x2dc
    uint change_cipher_spec_ok;  // offset: 0x2e0
    uint listen;  // offset: 0x2e4
}; // size: 0x2e8

struct dtls1_timeout_st {
    uint read_timeouts;  // offset: 0x0
    uint write_timeouts;  // offset: 0x4
    uint num_alerts;  // offset: 0x8
}; // size: 0xc

struct ec_key_st {
    // Empty structure
}; // size: 0x1

struct engine_st {
    // Empty structure
}; // size: 0x1

struct env_md_ctx_st {
    EVP_MD * digest;  // offset: 0x0
    ENGINE * engine;  // offset: 0x4
    ulong flags;  // offset: 0x8
    void * md_data;  // offset: 0xc
    EVP_PKEY_CTX * pctx;  // offset: 0x10
    _func_1230 * update;  // offset: 0x14
}; // size: 0x18

struct env_md_st {
    int type;  // offset: 0x0
    int pkey_type;  // offset: 0x4
    int md_size;  // offset: 0x8
    ulong flags;  // offset: 0xc
    _func_1220 * init;  // offset: 0x10
    _func_1221 * update;  // offset: 0x14
    _func_1222 * final;  // offset: 0x18
    _func_1223 * copy;  // offset: 0x1c
    _func_1224 * cleanup;  // offset: 0x20
    _func_1225 * sign;  // offset: 0x24
    _func_1226 * verify;  // offset: 0x28
    int required_pkey_type[5];  // offset: 0x2c
    int block_size;  // offset: 0x40
    int ctx_size;  // offset: 0x44
    _func_1227 * md_ctrl;  // offset: 0x48
}; // size: 0x4c

struct evp_cipher_ctx_st {
    EVP_CIPHER * cipher;  // offset: 0x0
    ENGINE * engine;  // offset: 0x4
    int encrypt;  // offset: 0x8
    int buf_len;  // offset: 0xc
    uchar oiv[16];  // offset: 0x10
    uchar iv[16];  // offset: 0x20
    uchar buf[32];  // offset: 0x30
    int num;  // offset: 0x50
    void * app_data;  // offset: 0x54
    int key_len;  // offset: 0x58
    ulong flags;  // offset: 0x5c
    void * cipher_data;  // offset: 0x60
    int final_used;  // offset: 0x64
    int block_mask;  // offset: 0x68
    uchar final[32];  // offset: 0x6c
}; // size: 0x8c

struct evp_cipher_st {
    int nid;  // offset: 0x0
    int block_size;  // offset: 0x4
    int key_len;  // offset: 0x8
    int iv_len;  // offset: 0xc
    ulong flags;  // offset: 0x10
    _func_1231 * init;  // offset: 0x14
    _func_1232 * do_cipher;  // offset: 0x18
    _func_1233 * cleanup;  // offset: 0x1c
    int ctx_size;  // offset: 0x20
    _func_1234 * set_asn1_parameters;  // offset: 0x24
    _func_1235 * get_asn1_parameters;  // offset: 0x28
    _func_1236 * ctrl;  // offset: 0x2c
    void * app_data;  // offset: 0x30
}; // size: 0x34

struct evp_pkey_asn1_method_st {
    // Empty structure
}; // size: 0x1

struct evp_pkey_ctx_st {
    // Empty structure
}; // size: 0x1

struct evp_pkey_st {
    int type;  // offset: 0x0
    int save_type;  // offset: 0x4
    int references;  // offset: 0x8
    EVP_PKEY_ASN1_METHOD * ameth;  // offset: 0xc
    ENGINE * engine;  // offset: 0x10
    _union_277 pkey;  // offset: 0x14
    int save_parameters;  // offset: 0x18
    stack_st_X509_ATTRIBUTE * attributes;  // offset: 0x1c
}; // size: 0x20

struct hm_header_st {
    uchar type;  // offset: 0x0
    ulong msg_len;  // offset: 0x4
    ushort seq;  // offset: 0x8
    ulong frag_off;  // offset: 0xc
    ulong frag_len;  // offset: 0x10
    uint is_ccs;  // offset: 0x14
    dtls1_retransmit_state saved_retransmit_state;  // offset: 0x18
}; // size: 0x2c

struct hmac_ctx_st {
    EVP_MD * md;  // offset: 0x0
    EVP_MD_CTX md_ctx;  // offset: 0x4
    EVP_MD_CTX i_ctx;  // offset: 0x1c
    EVP_MD_CTX o_ctx;  // offset: 0x34
    uint key_length;  // offset: 0x4c
    uchar key[128];  // offset: 0x50
}; // size: 0xd0

struct hostent {
    char * h_name;  // offset: 0x0
    char * * h_aliases;  // offset: 0x4
    int h_addrtype;  // offset: 0x8
    int h_length;  // offset: 0xc
    char * * h_addr_list;  // offset: 0x10
}; // size: 0x14

struct in_addr {
    in_addr_t s_addr;  // offset: 0x0
}; // size: 0x4

struct itimerval {
    timeval it_interval;  // offset: 0x0
    timeval it_value;  // offset: 0x8
}; // size: 0x10

struct kssl_ctx_st {
    char * service_name;  // offset: 0x0
    char * service_host;  // offset: 0x4
    char * client_princ;  // offset: 0x8
    char * keytab_file;  // offset: 0xc
    char * cred_cache;  // offset: 0x10
    krb5_enctype enctype;  // offset: 0x14
    int length;  // offset: 0x18
    krb5_octet * key;  // offset: 0x1c
}; // size: 0x20

struct lhash_st_SSL_SESSION {
    int dummy;  // offset: 0x0
}; // size: 0x4

struct record_pqueue_st {
    ushort epoch;  // offset: 0x0
    pqueue q;  // offset: 0x4
}; // size: 0x8

struct rsa_meth_st {
    char * name;  // offset: 0x0
    _func_1760 * rsa_pub_enc;  // offset: 0x4
    _func_1761 * rsa_pub_dec;  // offset: 0x8
    _func_1762 * rsa_priv_enc;  // offset: 0xc
    _func_1763 * rsa_priv_dec;  // offset: 0x10
    _func_1764 * rsa_mod_exp;  // offset: 0x14
    _func_1765 * bn_mod_exp;  // offset: 0x18
    _func_1766 * init;  // offset: 0x1c
    _func_1767 * finish;  // offset: 0x20
    int flags;  // offset: 0x24
    char * app_data;  // offset: 0x28
    _func_1768 * rsa_sign;  // offset: 0x2c
    _func_1769 * rsa_verify;  // offset: 0x30
    _func_1770 * rsa_keygen;  // offset: 0x34
}; // size: 0x38

struct rsa_st {
    int pad;  // offset: 0x0
    long version;  // offset: 0x4
    RSA_METHOD * meth;  // offset: 0x8
    ENGINE * engine;  // offset: 0xc
    BIGNUM * n;  // offset: 0x10
    BIGNUM * e;  // offset: 0x14
    BIGNUM * d;  // offset: 0x18
    BIGNUM * p;  // offset: 0x1c
    BIGNUM * q;  // offset: 0x20
    BIGNUM * dmp1;  // offset: 0x24
    BIGNUM * dmq1;  // offset: 0x28
    BIGNUM * iqmp;  // offset: 0x2c
    CRYPTO_EX_DATA ex_data;  // offset: 0x30
    int references;  // offset: 0x38
    int flags;  // offset: 0x3c
    BN_MONT_CTX * _method_mod_n;  // offset: 0x40
    BN_MONT_CTX * _method_mod_p;  // offset: 0x44
    BN_MONT_CTX * _method_mod_q;  // offset: 0x48
    char * bignum_data;  // offset: 0x4c
    BN_BLINDING * blinding;  // offset: 0x50
    BN_BLINDING * mt_blinding;  // offset: 0x54
}; // size: 0x58

struct sess_cert_st {
    // Empty structure
}; // size: 0x1

struct sockaddr {
    sa_family_t sa_family;  // offset: 0x0
    char sa_data[14];  // offset: 0x2
}; // size: 0x10

struct srtp_protection_profile_st {
    char * name;  // offset: 0x0
    ulong id;  // offset: 0x4
}; // size: 0x8

struct ssl2_state_st {
    int three_byte_header;  // offset: 0x0
    int clear_text;  // offset: 0x4
    int escape;  // offset: 0x8
    int ssl2_rollback;  // offset: 0xc
    uint wnum;  // offset: 0x10
    int wpend_tot;  // offset: 0x14
    uchar * wpend_buf;  // offset: 0x18
    int wpend_off;  // offset: 0x1c
    int wpend_len;  // offset: 0x20
    int wpend_ret;  // offset: 0x24
    int rbuf_left;  // offset: 0x28
    int rbuf_offs;  // offset: 0x2c
    uchar * rbuf;  // offset: 0x30
    uchar * wbuf;  // offset: 0x34
    uchar * write_ptr;  // offset: 0x38
    uint padding;  // offset: 0x3c
    uint rlength;  // offset: 0x40
    int ract_data_length;  // offset: 0x44
    uint wlength;  // offset: 0x48
    int wact_data_length;  // offset: 0x4c
    uchar * ract_data;  // offset: 0x50
    uchar * wact_data;  // offset: 0x54
    uchar * mac_data;  // offset: 0x58
    uchar * read_key;  // offset: 0x5c
    uchar * write_key;  // offset: 0x60
    uint challenge_length;  // offset: 0x64
    uchar challenge[32];  // offset: 0x68
    uint conn_id_length;  // offset: 0x88
    uchar conn_id[16];  // offset: 0x8c
    uint key_material_length;  // offset: 0x9c
    uchar key_material[48];  // offset: 0xa0
    ulong read_sequence;  // offset: 0xd0
    ulong write_sequence;  // offset: 0xd4
    _struct_647 tmp;  // offset: 0xd8
}; // size: 0x120

struct ssl3_buf_freelist_st {
    // Empty structure
}; // size: 0x1

struct ssl3_buffer_st {
    uchar * buf;  // offset: 0x0
    size_t len;  // offset: 0x4
    int offset;  // offset: 0x8
    int left;  // offset: 0xc
}; // size: 0x10

struct ssl3_enc_method {
    // Empty structure
}; // size: 0x1

struct ssl3_record_st {
    int type;  // offset: 0x0
    uint length;  // offset: 0x4
    uint off;  // offset: 0x8
    uchar * data;  // offset: 0xc
    uchar * input;  // offset: 0x10
    uchar * comp;  // offset: 0x14
    ulong epoch;  // offset: 0x18
    uchar seq_num[8];  // offset: 0x1c
}; // size: 0x24

struct ssl3_state_st {
    long flags;  // offset: 0x0
    int delay_buf_pop_ret;  // offset: 0x4
    uchar read_sequence[8];  // offset: 0x8
    int read_mac_secret_size;  // offset: 0x10
    uchar read_mac_secret[64];  // offset: 0x14
    uchar write_sequence[8];  // offset: 0x54
    int write_mac_secret_size;  // offset: 0x5c
    uchar write_mac_secret[64];  // offset: 0x60
    uchar server_random[32];  // offset: 0xa0
    uchar client_random[32];  // offset: 0xc0
    int need_empty_fragments;  // offset: 0xe0
    int empty_fragment_done;  // offset: 0xe4
    int init_extra;  // offset: 0xe8
    SSL3_BUFFER rbuf;  // offset: 0xec
    SSL3_BUFFER wbuf;  // offset: 0xfc
    SSL3_RECORD rrec;  // offset: 0x10c
    SSL3_RECORD wrec;  // offset: 0x130
    uchar alert_fragment[2];  // offset: 0x154
    uint alert_fragment_len;  // offset: 0x158
    uchar handshake_fragment[4];  // offset: 0x15c
    uint handshake_fragment_len;  // offset: 0x160
    uint wnum;  // offset: 0x164
    int wpend_tot;  // offset: 0x168
    int wpend_type;  // offset: 0x16c
    int wpend_ret;  // offset: 0x170
    uchar * wpend_buf;  // offset: 0x174
    BIO * handshake_buffer;  // offset: 0x178
    EVP_MD_CTX * * handshake_dgst;  // offset: 0x17c
    int change_cipher_spec;  // offset: 0x180
    int warn_alert;  // offset: 0x184
    int fatal_alert;  // offset: 0x188
    int alert_dispatch;  // offset: 0x18c
    uchar send_alert[2];  // offset: 0x190
    int renegotiate;  // offset: 0x194
    int total_renegotiations;  // offset: 0x198
    int num_renegotiations;  // offset: 0x19c
    int in_read_app_data;  // offset: 0x1a0
    void * client_opaque_prf_input;  // offset: 0x1a4
    size_t client_opaque_prf_input_len;  // offset: 0x1a8
    void * server_opaque_prf_input;  // offset: 0x1ac
    size_t server_opaque_prf_input_len;  // offset: 0x1b0
    _struct_651 tmp;  // offset: 0x1b4
    uchar previous_client_finished[64];  // offset: 0x394
    uchar previous_client_finished_len;  // offset: 0x3d4
    uchar previous_server_finished[64];  // offset: 0x3d5
    uchar previous_server_finished_len;  // offset: 0x415
    int send_connection_binding;  // offset: 0x418
    int next_proto_neg_seen;  // offset: 0x41c
}; // size: 0x420

struct ssl_cipher_st {
    int valid;  // offset: 0x0
    char * name;  // offset: 0x4
    ulong id;  // offset: 0x8
    ulong algorithm_mkey;  // offset: 0xc
    ulong algorithm_auth;  // offset: 0x10
    ulong algorithm_enc;  // offset: 0x14
    ulong algorithm_mac;  // offset: 0x18
    ulong algorithm_ssl;  // offset: 0x1c
    ulong algo_strength;  // offset: 0x20
    ulong algorithm2;  // offset: 0x24
    int strength_bits;  // offset: 0x28
    int alg_bits;  // offset: 0x2c
}; // size: 0x30

struct ssl_comp_st {
    int id;  // offset: 0x0
    char * name;  // offset: 0x4
    COMP_METHOD * method;  // offset: 0x8
}; // size: 0xc

struct ssl_ctx_st {
    SSL_METHOD * method;  // offset: 0x0
    stack_st_SSL_CIPHER * cipher_list;  // offset: 0x4
    stack_st_SSL_CIPHER * cipher_list_by_id;  // offset: 0x8
    x509_store_st * cert_store;  // offset: 0xc
    lhash_st_SSL_SESSION * sessions;  // offset: 0x10
    ulong session_cache_size;  // offset: 0x14
    ssl_session_st * session_cache_head;  // offset: 0x18
    ssl_session_st * session_cache_tail;  // offset: 0x1c
    int session_cache_mode;  // offset: 0x20
    long session_timeout;  // offset: 0x24
    _func_3229 * new_session_cb;  // offset: 0x28
    _func_3230 * remove_session_cb;  // offset: 0x2c
    _func_3231 * get_session_cb;  // offset: 0x30
    _struct_621 stats;  // offset: 0x34
    int references;  // offset: 0x60
    _func_3232 * app_verify_callback;  // offset: 0x64
    void * app_verify_arg;  // offset: 0x68
    pem_password_cb * default_passwd_callback;  // offset: 0x6c
    void * default_passwd_callback_userdata;  // offset: 0x70
    _func_3233 * client_cert_cb;  // offset: 0x74
    _func_3234 * app_gen_cookie_cb;  // offset: 0x78
    _func_3235 * app_verify_cookie_cb;  // offset: 0x7c
    CRYPTO_EX_DATA ex_data;  // offset: 0x80
    EVP_MD * rsa_md5;  // offset: 0x88
    EVP_MD * md5;  // offset: 0x8c
    EVP_MD * sha1;  // offset: 0x90
    stack_st_X509 * extra_certs;  // offset: 0x94
    stack_st_SSL_COMP * comp_methods;  // offset: 0x98
    _func_3236 * info_callback;  // offset: 0x9c
    stack_st_X509_NAME * client_CA;  // offset: 0xa0
    ulong options;  // offset: 0xa4
    ulong mode;  // offset: 0xa8
    long max_cert_list;  // offset: 0xac
    cert_st * cert;  // offset: 0xb0
    int read_ahead;  // offset: 0xb4
    _func_3237 * msg_callback;  // offset: 0xb8
    void * msg_callback_arg;  // offset: 0xbc
    int verify_mode;  // offset: 0xc0
    uint sid_ctx_length;  // offset: 0xc4
    uchar sid_ctx[32];  // offset: 0xc8
    _func_3238 * default_verify_callback;  // offset: 0xe8
    GEN_SESSION_CB generate_session_id;  // offset: 0xec
    X509_VERIFY_PARAM * param;  // offset: 0xf0
    int quiet_shutdown;  // offset: 0xf4
    uint max_send_fragment;  // offset: 0xf8
    ENGINE * client_cert_engine;  // offset: 0xfc
    _func_3239 * tlsext_servername_callback;  // offset: 0x100
    void * tlsext_servername_arg;  // offset: 0x104
    uchar tlsext_tick_key_name[16];  // offset: 0x108
    uchar tlsext_tick_hmac_key[16];  // offset: 0x118
    uchar tlsext_tick_aes_key[16];  // offset: 0x128
    _func_3240 * tlsext_ticket_key_cb;  // offset: 0x138
    _func_3241 * tlsext_status_cb;  // offset: 0x13c
    void * tlsext_status_arg;  // offset: 0x140
    _func_3242 * tlsext_opaque_prf_input_callback;  // offset: 0x144
    void * tlsext_opaque_prf_input_callback_arg;  // offset: 0x148
    char * psk_identity_hint;  // offset: 0x14c
    _func_3243 * psk_client_callback;  // offset: 0x150
    _func_3244 * psk_server_callback;  // offset: 0x154
    uint freelist_max_len;  // offset: 0x158
    ssl3_buf_freelist_st * wbuf_freelist;  // offset: 0x15c
    ssl3_buf_freelist_st * rbuf_freelist;  // offset: 0x160
    _func_3245 * next_protos_advertised_cb;  // offset: 0x164
    void * next_protos_advertised_cb_arg;  // offset: 0x168
    _func_3246 * next_proto_select_cb;  // offset: 0x16c
    void * next_proto_select_cb_arg;  // offset: 0x170
    stack_st_SRTP_PROTECTION_PROFILE * srtp_profiles;  // offset: 0x174
}; // size: 0x178

struct ssl_method_st {
    int version;  // offset: 0x0
    _func_3195 * ssl_new;  // offset: 0x4
    _func_3196 * ssl_clear;  // offset: 0x8
    _func_3197 * ssl_free;  // offset: 0xc
    _func_3198 * ssl_accept;  // offset: 0x10
    _func_3199 * ssl_connect;  // offset: 0x14
    _func_3200 * ssl_read;  // offset: 0x18
    _func_3201 * ssl_peek;  // offset: 0x1c
    _func_3202 * ssl_write;  // offset: 0x20
    _func_3203 * ssl_shutdown;  // offset: 0x24
    _func_3204 * ssl_renegotiate;  // offset: 0x28
    _func_3205 * ssl_renegotiate_check;  // offset: 0x2c
    _func_3206 * ssl_get_message;  // offset: 0x30
    _func_3207 * ssl_read_bytes;  // offset: 0x34
    _func_3208 * ssl_write_bytes;  // offset: 0x38
    _func_3209 * ssl_dispatch_alert;  // offset: 0x3c
    _func_3210 * ssl_ctrl;  // offset: 0x40
    _func_3211 * ssl_ctx_ctrl;  // offset: 0x44
    _func_3212 * get_cipher_by_char;  // offset: 0x48
    _func_3213 * put_cipher_by_char;  // offset: 0x4c
    _func_3214 * ssl_pending;  // offset: 0x50
    _func_3215 * num_ciphers;  // offset: 0x54
    _func_3216 * get_cipher;  // offset: 0x58
    _func_3217 * get_ssl_method;  // offset: 0x5c
    _func_3218 * get_timeout;  // offset: 0x60
    ssl3_enc_method * ssl3_enc;  // offset: 0x64
    _func_3219 * ssl_version;  // offset: 0x68
    _func_3220 * ssl_callback_ctrl;  // offset: 0x6c
    _func_3222 * ssl_ctx_callback_ctrl;  // offset: 0x70
}; // size: 0x74

struct ssl_session_st {
    int ssl_version;  // offset: 0x0
    uint key_arg_length;  // offset: 0x4
    uchar key_arg[8];  // offset: 0x8
    int master_key_length;  // offset: 0x10
    uchar master_key[48];  // offset: 0x14
    uint session_id_length;  // offset: 0x44
    uchar session_id[32];  // offset: 0x48
    uint sid_ctx_length;  // offset: 0x68
    uchar sid_ctx[32];  // offset: 0x6c
    uint krb5_client_princ_len;  // offset: 0x8c
    uchar krb5_client_princ[256];  // offset: 0x90
    char * psk_identity_hint;  // offset: 0x190
    char * psk_identity;  // offset: 0x194
    int not_resumable;  // offset: 0x198
    sess_cert_st * sess_cert;  // offset: 0x19c
    X509 * peer;  // offset: 0x1a0
    long verify_result;  // offset: 0x1a4
    int references;  // offset: 0x1a8
    long timeout;  // offset: 0x1ac
    long time;  // offset: 0x1b0
    uint compress_meth;  // offset: 0x1b4
    SSL_CIPHER * cipher;  // offset: 0x1b8
    ulong cipher_id;  // offset: 0x1bc
    stack_st_SSL_CIPHER * ciphers;  // offset: 0x1c0
    CRYPTO_EX_DATA ex_data;  // offset: 0x1c4
    ssl_session_st * prev;  // offset: 0x1cc
    ssl_session_st * * next;  // offset: 0x1d0
    char * tlsext_hostname;  // offset: 0x1d4
    size_t tlsext_ecpointformatlist_length;  // offset: 0x1d8
    uchar * tlsext_ecpointformatlist;  // offset: 0x1dc
    size_t tlsext_ellipticcurvelist_length;  // offset: 0x1e0
    uchar * tlsext_ellipticcurvelist;  // offset: 0x1e4
    uchar * tlsext_tick;  // offset: 0x1e8
    size_t tlsext_ticklen;  // offset: 0x1ec
    long tlsext_tick_lifetime_hint;  // offset: 0x1f0
}; // size: 0x1f4

struct ssl_st {
    int version;  // offset: 0x0
    int type;  // offset: 0x4
    SSL_METHOD * method;  // offset: 0x8
    BIO * rbio;  // offset: 0xc
    BIO * wbio;  // offset: 0x10
    BIO * bbio;  // offset: 0x14
    int rwstate;  // offset: 0x18
    int in_handshake;  // offset: 0x1c
    _func_3291 * handshake_func;  // offset: 0x20
    int server;  // offset: 0x24
    int new_session;  // offset: 0x28
    int quiet_shutdown;  // offset: 0x2c
    int shutdown;  // offset: 0x30
    int state;  // offset: 0x34
    int rstate;  // offset: 0x38
    BUF_MEM * init_buf;  // offset: 0x3c
    void * init_msg;  // offset: 0x40
    int init_num;  // offset: 0x44
    int init_off;  // offset: 0x48
    uchar * packet;  // offset: 0x4c
    uint packet_length;  // offset: 0x50
    ssl2_state_st * s2;  // offset: 0x54
    ssl3_state_st * s3;  // offset: 0x58
    dtls1_state_st * d1;  // offset: 0x5c
    int read_ahead;  // offset: 0x60
    _func_3292 * msg_callback;  // offset: 0x64
    void * msg_callback_arg;  // offset: 0x68
    int hit;  // offset: 0x6c
    X509_VERIFY_PARAM * param;  // offset: 0x70
    stack_st_SSL_CIPHER * cipher_list;  // offset: 0x74
    stack_st_SSL_CIPHER * cipher_list_by_id;  // offset: 0x78
    int mac_flags;  // offset: 0x7c
    EVP_CIPHER_CTX * enc_read_ctx;  // offset: 0x80
    EVP_MD_CTX * read_hash;  // offset: 0x84
    COMP_CTX * expand;  // offset: 0x88
    EVP_CIPHER_CTX * enc_write_ctx;  // offset: 0x8c
    EVP_MD_CTX * write_hash;  // offset: 0x90
    COMP_CTX * compress;  // offset: 0x94
    cert_st * cert;  // offset: 0x98
    uint sid_ctx_length;  // offset: 0x9c
    uchar sid_ctx[32];  // offset: 0xa0
    SSL_SESSION * session;  // offset: 0xc0
    GEN_SESSION_CB generate_session_id;  // offset: 0xc4
    int verify_mode;  // offset: 0xc8
    _func_3293 * verify_callback;  // offset: 0xcc
    _func_3294 * info_callback;  // offset: 0xd0
    int error;  // offset: 0xd4
    int error_code;  // offset: 0xd8
    KSSL_CTX * kssl_ctx;  // offset: 0xdc
    _func_3295 * psk_client_callback;  // offset: 0xe0
    _func_3296 * psk_server_callback;  // offset: 0xe4
    SSL_CTX * ctx;  // offset: 0xe8
    int debug;  // offset: 0xec
    long verify_result;  // offset: 0xf0
    CRYPTO_EX_DATA ex_data;  // offset: 0xf4
    stack_st_X509_NAME * client_CA;  // offset: 0xfc
    int references;  // offset: 0x100
    ulong options;  // offset: 0x104
    ulong mode;  // offset: 0x108
    long max_cert_list;  // offset: 0x10c
    int first_packet;  // offset: 0x110
    int client_version;  // offset: 0x114
    uint max_send_fragment;  // offset: 0x118
    _func_3297 * tlsext_debug_cb;  // offset: 0x11c
    void * tlsext_debug_arg;  // offset: 0x120
    char * tlsext_hostname;  // offset: 0x124
    int servername_done;  // offset: 0x128
    int tlsext_status_type;  // offset: 0x12c
    int tlsext_status_expected;  // offset: 0x130
    stack_st_OCSP_RESPID * tlsext_ocsp_ids;  // offset: 0x134
    X509_EXTENSIONS * tlsext_ocsp_exts;  // offset: 0x138
    uchar * tlsext_ocsp_resp;  // offset: 0x13c
    int tlsext_ocsp_resplen;  // offset: 0x140
    int tlsext_ticket_expected;  // offset: 0x144
    size_t tlsext_ecpointformatlist_length;  // offset: 0x148
    uchar * tlsext_ecpointformatlist;  // offset: 0x14c
    size_t tlsext_ellipticcurvelist_length;  // offset: 0x150
    uchar * tlsext_ellipticcurvelist;  // offset: 0x154
    void * tlsext_opaque_prf_input;  // offset: 0x158
    size_t tlsext_opaque_prf_input_len;  // offset: 0x15c
    TLS_SESSION_TICKET_EXT * tlsext_session_ticket;  // offset: 0x160
    tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb;  // offset: 0x164
    void * tls_session_ticket_ext_cb_arg;  // offset: 0x168
    tls_session_secret_cb_fn tls_session_secret_cb;  // offset: 0x16c
    void * tls_session_secret_cb_arg;  // offset: 0x170
    SSL_CTX * initial_ctx;  // offset: 0x174
    uchar * next_proto_negotiated;  // offset: 0x178
    uchar next_proto_negotiated_len;  // offset: 0x17c
    stack_st_SRTP_PROTECTION_PROFILE * srtp_profiles;  // offset: 0x180
    SRTP_PROTECTION_PROFILE * srtp_profile;  // offset: 0x184
    uint tlsext_heartbeat;  // offset: 0x188
    uint tlsext_hb_pending;  // offset: 0x18c
    uint tlsext_hb_seq;  // offset: 0x190
    int renegotiate;  // offset: 0x194
}; // size: 0x198

struct stack_st {
    int num;  // offset: 0x0
    char * * data;  // offset: 0x4
    int sorted;  // offset: 0x8
    int num_alloc;  // offset: 0xc
    _func_290 * comp;  // offset: 0x10
}; // size: 0x14

struct stack_st_ASIdOrRange {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_ASN1_OBJECT {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_DIST_POINT {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_GENERAL_NAME {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_GENERAL_NAMES {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_GENERAL_SUBTREE {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_IPAddressFamily {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_OCSP_RESPID {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_SRTP_PROTECTION_PROFILE {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_SSL_CIPHER {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_SSL_COMP {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509 {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_ALGOR {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_ATTRIBUTE {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_CRL {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_EXTENSION {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_LOOKUP {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_NAME {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_NAME_ENTRY {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_OBJECT {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_X509_REVOKED {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct stack_st_void {
    _STACK stack;  // offset: 0x0
}; // size: 0x14

struct timeval {
    __time_t tv_sec;  // offset: 0x0
    __suseconds_t tv_usec;  // offset: 0x4
}; // size: 0x8

struct timezone {
    int tz_minuteswest;  // offset: 0x0
    int tz_dsttime;  // offset: 0x4
}; // size: 0x8

struct tls_session_ticket_ext_st {
    ushort length;  // offset: 0x0
    void * data;  // offset: 0x4
}; // size: 0x8

struct x509_cert_aux_st {
    stack_st_ASN1_OBJECT * trust;  // offset: 0x0
    stack_st_ASN1_OBJECT * reject;  // offset: 0x4
    ASN1_UTF8STRING * alias;  // offset: 0x8
    ASN1_OCTET_STRING * keyid;  // offset: 0xc
    stack_st_X509_ALGOR * other;  // offset: 0x10
}; // size: 0x14

struct x509_cinf_st {
    ASN1_INTEGER * version;  // offset: 0x0
    ASN1_INTEGER * serialNumber;  // offset: 0x4
    X509_ALGOR * signature;  // offset: 0x8
    X509_NAME * issuer;  // offset: 0xc
    X509_VAL * validity;  // offset: 0x10
    X509_NAME * subject;  // offset: 0x14
    X509_PUBKEY * key;  // offset: 0x18
    ASN1_BIT_STRING * issuerUID;  // offset: 0x1c
    ASN1_BIT_STRING * subjectUID;  // offset: 0x20
    stack_st_X509_EXTENSION * extensions;  // offset: 0x24
    ASN1_ENCODING enc;  // offset: 0x28
}; // size: 0x34

struct x509_crl_method_st {
    // Empty structure
}; // size: 0x1

struct x509_st {
    X509_CINF * cert_info;  // offset: 0x0
    X509_ALGOR * sig_alg;  // offset: 0x4
    ASN1_BIT_STRING * signature;  // offset: 0x8
    int valid;  // offset: 0xc
    int references;  // offset: 0x10
    char * name;  // offset: 0x14
    CRYPTO_EX_DATA ex_data;  // offset: 0x18
    long ex_pathlen;  // offset: 0x20
    long ex_pcpathlen;  // offset: 0x24
    ulong ex_flags;  // offset: 0x28
    ulong ex_kusage;  // offset: 0x2c
    ulong ex_xkusage;  // offset: 0x30
    ulong ex_nscert;  // offset: 0x34
    ASN1_OCTET_STRING * skid;  // offset: 0x38
    AUTHORITY_KEYID * akid;  // offset: 0x3c
    X509_POLICY_CACHE * policy_cache;  // offset: 0x40
    stack_st_DIST_POINT * crldp;  // offset: 0x44
    stack_st_GENERAL_NAME * altname;  // offset: 0x48
    NAME_CONSTRAINTS * nc;  // offset: 0x4c
    stack_st_IPAddressFamily * rfc3779_addr;  // offset: 0x50
    ASIdentifiers_st * rfc3779_asid;  // offset: 0x54
    uchar sha1_hash[20];  // offset: 0x58
    X509_CERT_AUX * aux;  // offset: 0x6c
}; // size: 0x70

struct x509_store_ctx_st {
    X509_STORE * ctx;  // offset: 0x0
    int current_method;  // offset: 0x4
    X509 * cert;  // offset: 0x8
    stack_st_X509 * untrusted;  // offset: 0xc
    stack_st_X509_CRL * crls;  // offset: 0x10
    X509_VERIFY_PARAM * param;  // offset: 0x14
    void * other_ctx;  // offset: 0x18
    _func_1997 * verify;  // offset: 0x1c
    _func_1998 * verify_cb;  // offset: 0x20
    _func_1999 * get_issuer;  // offset: 0x24
    _func_2000 * check_issued;  // offset: 0x28
    _func_2001 * check_revocation;  // offset: 0x2c
    _func_2002 * get_crl;  // offset: 0x30
    _func_2003 * check_crl;  // offset: 0x34
    _func_2004 * cert_crl;  // offset: 0x38
    _func_2005 * check_policy;  // offset: 0x3c
    _func_2006 * lookup_certs;  // offset: 0x40
    _func_2007 * lookup_crls;  // offset: 0x44
    _func_2008 * cleanup;  // offset: 0x48
    int valid;  // offset: 0x4c
    int last_untrusted;  // offset: 0x50
    stack_st_X509 * chain;  // offset: 0x54
    X509_POLICY_TREE * tree;  // offset: 0x58
    int explicit_policy;  // offset: 0x5c
    int error_depth;  // offset: 0x60
    int error;  // offset: 0x64
    X509 * current_cert;  // offset: 0x68
    X509 * current_issuer;  // offset: 0x6c
    X509_CRL * current_crl;  // offset: 0x70
    int current_crl_score;  // offset: 0x74
    uint current_reasons;  // offset: 0x78
    X509_STORE_CTX * parent;  // offset: 0x7c
    CRYPTO_EX_DATA ex_data;  // offset: 0x80
}; // size: 0x88

struct x509_store_st {
    int cache;  // offset: 0x0
    stack_st_X509_OBJECT * objs;  // offset: 0x4
    stack_st_X509_LOOKUP * get_cert_methods;  // offset: 0x8
    X509_VERIFY_PARAM * param;  // offset: 0xc
    _func_1985 * verify;  // offset: 0x10
    _func_1986 * verify_cb;  // offset: 0x14
    _func_1987 * get_issuer;  // offset: 0x18
    _func_1988 * check_issued;  // offset: 0x1c
    _func_1989 * check_revocation;  // offset: 0x20
    _func_1990 * get_crl;  // offset: 0x24
    _func_1991 * check_crl;  // offset: 0x28
    _func_1992 * cert_crl;  // offset: 0x2c
    _func_1993 * lookup_certs;  // offset: 0x30
    _func_1994 * lookup_crls;  // offset: 0x34
    _func_1995 * cleanup;  // offset: 0x38
    CRYPTO_EX_DATA ex_data;  // offset: 0x3c
    int references;  // offset: 0x44
}; // size: 0x48

/* ==================== Unions ==================== */

union _union_181 {
    _func_556 * cb_1;
    _func_557 * cb_2;
}; // size: 0x4

union _union_263 {
    char * ptr;
    ASN1_BOOLEAN boolean;
    ASN1_STRING * asn1_string;
    ASN1_OBJECT * object;
    ASN1_INTEGER * integer;
    ASN1_ENUMERATED * enumerated;
    ASN1_BIT_STRING * bit_string;
    ASN1_OCTET_STRING * octet_string;
    ASN1_PRINTABLESTRING * printablestring;
    ASN1_T61STRING * t61string;
    ASN1_IA5STRING * ia5string;
    ASN1_GENERALSTRING * generalstring;
    ASN1_BMPSTRING * bmpstring;
    ASN1_UNIVERSALSTRING * universalstring;
    ASN1_UTCTIME * utctime;
    ASN1_GENERALIZEDTIME * generalizedtime;
    ASN1_VISIBLESTRING * visiblestring;
    ASN1_UTF8STRING * utf8string;
    ASN1_STRING * set;
    ASN1_STRING * sequence;
    ASN1_VALUE * asn1_value;
}; // size: 0x4

union _union_277 {
    char * ptr;
    rsa_st * rsa;
    dsa_st * dsa;
    dh_st * dh;
    ec_key_st * ec;
}; // size: 0x4

union _union_859 {
    GENERAL_NAMES * fullname;
    stack_st_X509_NAME_ENTRY * relativename;
}; // size: 0x4

union _union_933 {
    ASN1_NULL * inherit;
    ASIdOrRanges * asIdsOrRanges;
}; // size: 0x4

union pthread_attr_t {
    char[36] __size;
    long __align;
}; // size: 0x24

union sem_t {
    char[16] __size;
    long __align;
}; // size: 0x10

/* ==================== Type Definitions ==================== */

typedef stack_st_ASIdOrRange ASIdOrRanges;
typedef ASIdentifierChoice_st ASIdentifierChoice;
typedef asn1_string_st ASN1_BIT_STRING;
typedef asn1_string_st ASN1_BMPSTRING;
typedef int ASN1_BOOLEAN;
typedef ASN1_ENCODING_st ASN1_ENCODING;
typedef asn1_string_st ASN1_ENUMERATED;
typedef asn1_string_st ASN1_GENERALIZEDTIME;
typedef asn1_string_st ASN1_GENERALSTRING;
typedef asn1_string_st ASN1_IA5STRING;
typedef asn1_string_st ASN1_INTEGER;
typedef int ASN1_NULL;
typedef asn1_object_st ASN1_OBJECT;
typedef asn1_string_st ASN1_OCTET_STRING;
typedef asn1_string_st ASN1_PRINTABLESTRING;
typedef asn1_string_st ASN1_STRING;
typedef asn1_string_st ASN1_T61STRING;
typedef asn1_string_st ASN1_TIME;
typedef asn1_type_st ASN1_TYPE;
typedef asn1_string_st ASN1_UNIVERSALSTRING;
typedef asn1_string_st ASN1_UTCTIME;
typedef asn1_string_st ASN1_UTF8STRING;
typedef ASN1_VALUE_st ASN1_VALUE;
typedef asn1_string_st ASN1_VISIBLESTRING;
typedef AUTHORITY_KEYID_st AUTHORITY_KEYID;
typedef bignum_st BIGNUM;
typedef bio_st BIO;
typedef bio_method_st BIO_METHOD;
typedef bn_blinding_st BN_BLINDING;
typedef bignum_ctx BN_CTX;
typedef bn_gencb_st BN_GENCB;
typedef bn_mont_ctx_st BN_MONT_CTX;
typedef buf_mem_st BUF_MEM;
typedef comp_ctx_st COMP_CTX;
typedef comp_method_st COMP_METHOD;
typedef crypto_ex_data_st CRYPTO_EX_DATA;
typedef dh_st DH;
typedef dh_method DH_METHOD;
typedef DIST_POINT_NAME_st DIST_POINT_NAME;
typedef dsa_st DSA;
typedef dsa_method DSA_METHOD;
typedef DSA_SIG_st DSA_SIG;
typedef dtls1_bitmap_st DTLS1_BITMAP;
typedef ec_key_st EC_KEY;
typedef engine_st ENGINE;
typedef evp_cipher_st EVP_CIPHER;
typedef evp_cipher_ctx_st EVP_CIPHER_CTX;
typedef env_md_st EVP_MD;
typedef env_md_ctx_st EVP_MD_CTX;
typedef evp_pkey_st EVP_PKEY;
typedef evp_pkey_asn1_method_st EVP_PKEY_ASN1_METHOD;
typedef evp_pkey_ctx_st EVP_PKEY_CTX;
typedef _IO_FILE FILE;
typedef stack_st_GENERAL_NAME GENERAL_NAMES;
typedef GEN_SESSION_CB * GEN_SESSION_CB;
typedef hmac_ctx_st HMAC_CTX;
typedef ISSUING_DIST_POINT_st ISSUING_DIST_POINT;
typedef kssl_ctx_st KSSL_CTX;
typedef NAME_CONSTRAINTS_st NAME_CONSTRAINTS;
typedef rsa_st RSA;
typedef rsa_meth_st RSA_METHOD;
typedef srtp_protection_profile_st SRTP_PROTECTION_PROFILE;
typedef ssl_st SSL;
typedef ssl3_buffer_st SSL3_BUFFER;
typedef ssl3_record_st SSL3_RECORD;
typedef ssl_cipher_st SSL_CIPHER;
typedef ssl_comp_st SSL_COMP;
typedef ssl_ctx_st SSL_CTX;
typedef ssl_method_st SSL_METHOD;
typedef ssl_session_st SSL_SESSION;
typedef tls_session_ticket_ext_st TLS_SESSION_TICKET_EXT;
typedef x509_st X509;
typedef X509_algor_st X509_ALGOR;
typedef x509_cert_aux_st X509_CERT_AUX;
typedef x509_cinf_st X509_CINF;
typedef X509_crl_st X509_CRL;
typedef X509_crl_info_st X509_CRL_INFO;
typedef x509_crl_method_st X509_CRL_METHOD;
typedef stack_st_X509_EXTENSION X509_EXTENSIONS;
typedef X509_name_st X509_NAME;
typedef X509_POLICY_CACHE_st X509_POLICY_CACHE;
typedef X509_POLICY_TREE_st X509_POLICY_TREE;
typedef X509_pubkey_st X509_PUBKEY;
typedef x509_store_st X509_STORE;
typedef x509_store_ctx_st X509_STORE_CTX;
typedef X509_val_st X509_VAL;
typedef X509_VERIFY_PARAM_st X509_VERIFY_PARAM;
typedef void _IO_lock_t;
typedef stack_st _STACK;
typedef int __int32_t;
typedef __itimer_which __itimer_which_t;
typedef uint __mode_t;
typedef __quad_t __off64_t;
typedef long __off_t;
typedef int __pid_t;
typedef longlong __quad_t;
typedef __sighandler_t * __sighandler_t;
typedef uint __socklen_t;
typedef int __ssize_t;
typedef long __suseconds_t;
typedef long __time_t;
typedef timezone * __timezone_ptr_t;
typedef bio_info_cb bio_info_cb;
typedef uint32_t in_addr_t;
typedef krb5_int32 krb5_enctype;
typedef int krb5_int32;
typedef uchar krb5_octet;
typedef pem_password_cb pem_password_cb;
typedef _pqueue * pqueue;
typedef ulong pthread_t;
typedef record_pqueue_st record_pqueue;
typedef ushort sa_family_t;
typedef __sigset_t sigset_t;
typedef ulong size_t;
typedef __socklen_t socklen_t;
typedef __ssize_t ssize_t;
typedef __time_t time_t;
typedef tls_session_secret_cb_fn * tls_session_secret_cb_fn;
typedef tls_session_ticket_ext_cb_fn * tls_session_ticket_ext_cb_fn;
typedef uint uint32_t;

/* ==================== Function Prototypes ==================== */

int GEN_SESSION_CB(SSL * ssl, uchar * id, uint * id_len);
void __sighandler_t(int param0);
void * __start_routine(void * param0);
int _func_1220(EVP_MD_CTX * ctx);
int _func_1221(EVP_MD_CTX * ctx, void * data, size_t count);
int _func_1222(EVP_MD_CTX * ctx, uchar * md);
int _func_1223(EVP_MD_CTX * to, EVP_MD_CTX * from);
int _func_1224(EVP_MD_CTX * ctx);
int _func_1225(int type, uchar * m, uint m_length, uchar * sigret, uint * siglen, void * key);
int _func_1226(int type, uchar * m, uint m_length, uchar * sigbuf, uint siglen, void * key);
int _func_1227(EVP_MD_CTX * ctx, int cmd, int p1, void * p2);
int _func_1230(EVP_MD_CTX * ctx, void * data, size_t count);
int _func_1231(EVP_CIPHER_CTX * ctx, uchar * key, uchar * iv, int enc);
int _func_1232(EVP_CIPHER_CTX * ctx, uchar * out, uchar * in, size_t inl);
int _func_1233(EVP_CIPHER_CTX * param0);
int _func_1234(EVP_CIPHER_CTX * param0, ASN1_TYPE * param1);
int _func_1235(EVP_CIPHER_CTX * param0, ASN1_TYPE * param1);
int _func_1236(EVP_CIPHER_CTX * param0, int type, int arg, void * ptr);
int _func_1760(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1761(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1762(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1763(int flen, uchar * from, uchar * to, RSA * rsa, int padding);
int _func_1764(BIGNUM * r0, BIGNUM * I, RSA * rsa, BN_CTX * ctx);
int _func_1765(BIGNUM * r, BIGNUM * a, BIGNUM * p, BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int _func_1766(RSA * rsa);
int _func_1767(RSA * rsa);
int _func_1768(int type, uchar * m, uint m_length, uchar * sigret, uint * siglen, RSA * rsa);
int _func_1769(int dtype, uchar * m, uint m_length, uchar * sigbuf, uint siglen, RSA * rsa);
int _func_1770(RSA * rsa, int bits, BIGNUM * e, BN_GENCB * cb);
int _func_1843(DH * dh);
int _func_1844(uchar * key, BIGNUM * pub_key, DH * dh);
int _func_1845(DH * dh, BIGNUM * r, BIGNUM * a, BIGNUM * p, BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int _func_1846(DH * dh);
int _func_1847(DH * dh);
int _func_1848(DH * dh, int prime_len, int generator, BN_GENCB * cb);
DSA_SIG * _func_1875(uchar * dgst, int dlen, DSA * dsa);
int _func_1876(DSA * dsa, BN_CTX * ctx_in, BIGNUM * * kinvp, BIGNUM * * rp);
int _func_1877(uchar * dgst, int dgst_len, DSA_SIG * sig, DSA * dsa);
int _func_1878(DSA * dsa, BIGNUM * rr, BIGNUM * a1, BIGNUM * p1, BIGNUM * a2, BIGNUM * p2, BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * in_mont);
int _func_1879(DSA * dsa, BIGNUM * r, BIGNUM * a, BIGNUM * p, BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
int _func_1880(DSA * dsa);
int _func_1881(DSA * dsa);
int _func_1882(DSA * dsa, int bits, uchar * seed, int seed_len, int * counter_ret, ulong * h_ret, BN_GENCB * cb);
int _func_1883(DSA * dsa);
int _func_1985(X509_STORE_CTX * ctx);
int _func_1986(int ok, X509_STORE_CTX * ctx);
int _func_1987(X509 * * issuer, X509_STORE_CTX * ctx, X509 * x);
int _func_1988(X509_STORE_CTX * ctx, X509 * x, X509 * issuer);
int _func_1989(X509_STORE_CTX * ctx);
int _func_1990(X509_STORE_CTX * ctx, X509_CRL * * crl, X509 * x);
int _func_1991(X509_STORE_CTX * ctx, X509_CRL * crl);
int _func_1992(X509_STORE_CTX * ctx, X509_CRL * crl, X509 * x);
stack_st_X509 * _func_1993(X509_STORE_CTX * ctx, X509_NAME * nm);
stack_st_X509_CRL * _func_1994(X509_STORE_CTX * ctx, X509_NAME * nm);
int _func_1995(X509_STORE_CTX * ctx);
int _func_1997(X509_STORE_CTX * ctx);
int _func_1998(int ok, X509_STORE_CTX * ctx);
int _func_1999(X509 * * issuer, X509_STORE_CTX * ctx, X509 * x);
int _func_2000(X509_STORE_CTX * ctx, X509 * x, X509 * issuer);
int _func_2001(X509_STORE_CTX * ctx);
int _func_2002(X509_STORE_CTX * ctx, X509_CRL * * crl, X509 * x);
int _func_2003(X509_STORE_CTX * ctx, X509_CRL * crl);
int _func_2004(X509_STORE_CTX * ctx, X509_CRL * crl, X509 * x);
int _func_2005(X509_STORE_CTX * ctx);
stack_st_X509 * _func_2006(X509_STORE_CTX * ctx, X509_NAME * nm);
stack_st_X509_CRL * _func_2007(X509_STORE_CTX * ctx, X509_NAME * nm);
int _func_2008(X509_STORE_CTX * ctx);
int _func_290(void * param0, void * param1);
int _func_3195(SSL * s);
void _func_3196(SSL * s);
void _func_3197(SSL * s);
int _func_3198(SSL * s);
int _func_3199(SSL * s);
int _func_3200(SSL * s, void * buf, int len);
int _func_3201(SSL * s, void * buf, int len);
int _func_3202(SSL * s, void * buf, int len);
int _func_3203(SSL * s);
int _func_3204(SSL * s);
int _func_3205(SSL * s);
long _func_3206(SSL * s, int st1, int stn, int mt, long max, int * ok);
int _func_3207(SSL * s, int type, uchar * buf, int len, int peek);
int _func_3208(SSL * s, int type, void * buf_, int len);
int _func_3209(SSL * s);
long _func_3210(SSL * s, int cmd, long larg, void * parg);
long _func_3211(SSL_CTX * ctx, int cmd, long larg, void * parg);
SSL_CIPHER * _func_3212(uchar * ptr);
int _func_3213(SSL_CIPHER * cipher, uchar * ptr);
int _func_3214(SSL * s);
int _func_3215(void);
SSL_CIPHER * _func_3216(uint ncipher);
ssl_method_st * _func_3217(int version);
long _func_3218(void);
int _func_3219(void);
long _func_3220(SSL * s, int cb_id, fp * fp);
long _func_3222(SSL_CTX * s, int cb_id, fp * fp);
int _func_3229(ssl_st * ssl, SSL_SESSION * sess);
void _func_3230(ssl_ctx_st * ctx, SSL_SESSION * sess);
SSL_SESSION * _func_3231(ssl_st * ssl, uchar * data, int len, int * copy);
int _func_3232(X509_STORE_CTX * param0, void * param1);
int _func_3233(SSL * ssl, X509 * * x509, EVP_PKEY * * pkey);
int _func_3234(SSL * ssl, uchar * cookie, uint * cookie_len);
int _func_3235(SSL * ssl, uchar * cookie, uint cookie_len);
void _func_3236(SSL * ssl, int type, int val);
void _func_3237(int write_p, int version, int content_type, void * buf, size_t len, SSL * ssl, void * arg);
int _func_3238(int ok, X509_STORE_CTX * ctx);
int _func_3239(SSL * param0, int * param1, void * param2);
int _func_3240(SSL * ssl, uchar * name, uchar * iv, EVP_CIPHER_CTX * ectx, HMAC_CTX * hctx, int enc);
int _func_3241(SSL * ssl, void * arg);
int _func_3242(SSL * param0, void * peerinput, size_t len, void * arg);
uint _func_3243(SSL * ssl, char * hint, char * identity, uint max_identity_len, uchar * psk, uint max_psk_len);
uint _func_3244(SSL * ssl, char * identity, uchar * psk, uint max_psk_len);
int _func_3245(SSL * s, uchar * * buf, uint * len, void * arg);
int _func_3246(SSL * s, uchar * * out, uchar * outlen, uchar * in, uint inlen, void * arg);
int _func_3291(SSL * param0);
void _func_3292(int write_p, int version, int content_type, void * buf, size_t len, SSL * ssl, void * arg);
int _func_3293(int ok, X509_STORE_CTX * ctx);
void _func_3294(SSL * ssl, int type, int val);
uint _func_3295(SSL * ssl, char * hint, char * identity, uint max_identity_len, uchar * psk, uint max_psk_len);
uint _func_3296(SSL * ssl, char * identity, uchar * psk, uint max_psk_len);
void _func_3297(SSL * s, int client_server, int type, uchar * data, int len, void * arg);
void _func_556(int param0, int param1, void * param2);
int _func_557(int param0, int param1, BN_GENCB * param2);
int _func_711(COMP_CTX * ctx);
void _func_712(COMP_CTX * ctx);
int _func_713(COMP_CTX * ctx, uchar * out, uint olen, uchar * in, uint ilen);
int _func_714(COMP_CTX * ctx, uchar * out, uint olen, uchar * in, uint ilen);
long _func_715(void);
long _func_716(void);
int _func_737(BIO * param0, char * param1, int param2);
int _func_738(BIO * param0, char * param1, int param2);
int _func_739(BIO * param0, char * param1);
int _func_740(BIO * param0, char * param1, int param2);
long _func_741(BIO * param0, int param1, long param2, void * param3);
int _func_742(BIO * param0);
int _func_743(BIO * param0);
long _func_744(BIO * param0, int param1, bio_info_cb * param2);
long _func_745(bio_st * param0, int param1, char * param2, int param3, long param4, long param5);
void bio_info_cb(bio_st * param0, int param1, char * param2, int param3, long param4, long param5);
void fp(void);
int pem_password_cb(char * buf, int size, int rwflag, void * userdata);
int tls_session_secret_cb_fn(SSL * s, void * secret, int * secret_len, stack_st_SSL_CIPHER * peer_ciphers, SSL_CIPHER * * cipher, void * arg);
int tls_session_ticket_ext_cb_fn(SSL * s, uchar * data, int len, void * arg);

#endif // MINER_MONITOR_8CCF31B127934AC1_TYPES_H
